<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>螺旋数组</title>
    <link href="/2023/11/20/%E8%9E%BA%E6%97%8B%E6%95%B0%E7%BB%84/"/>
    <url>/2023/11/20/%E8%9E%BA%E6%97%8B%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="螺旋数组"><a href="#螺旋数组" class="headerlink" title="螺旋数组"></a>螺旋数组</h2><p>练习：<a href="https://leetcode.cn/problems/spiral-matrix/description/">54. 螺旋矩阵 - 力扣（LeetCode）</a></p><p>解析：<a href="https://www.bilibili.com/video/BV1Bb4y1x7xX/">54. 螺旋矩阵 | 手写图解版思路 + 代码讲解_哔哩哔哩_bilibili</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> spiralOrder = <span class="hljs-keyword">function</span> (<span class="hljs-params">matrix</span>) &#123;<br>    <span class="hljs-keyword">let</span> m = matrix.<span class="hljs-property">length</span>, n = matrix[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> newArr = [];<br>    <span class="hljs-keyword">let</span> top = <span class="hljs-number">0</span>, bottom = m - <span class="hljs-number">1</span>, left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>;  <span class="hljs-comment">//四个围栏</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <span class="hljs-comment">//用一个无限循环来控制螺旋遍历的流程，直到某个边界条件不满足为止</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = left; i &lt;= right; i++) newArr.<span class="hljs-title function_">push</span>(matrix[top][i]);<br>        <span class="hljs-keyword">if</span> (++top &gt; bottom) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = top; i &lt;= bottom; i++) newArr.<span class="hljs-title function_">push</span>(matrix[i][right]);<br>        <span class="hljs-keyword">if</span> (--right &lt; left) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = right; i &gt;= left; i--) newArr.<span class="hljs-title function_">push</span>(matrix[bottom][i]);<br>        <span class="hljs-keyword">if</span> (--bottom &lt; top) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = bottom; i &gt;= top; i--) newArr.<span class="hljs-title function_">push</span>(matrix[i][left]);<br>        <span class="hljs-keyword">if</span> (++left &gt; right) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newArr;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="相关习题"><a href="#相关习题" class="headerlink" title="相关习题"></a>相关习题</h2><h3 id="1-螺旋矩阵-II"><a href="#1-螺旋矩阵-II" class="headerlink" title="1.  螺旋矩阵 II"></a>1. <a href="https://leetcode.cn/problems/spiral-matrix-ii/"> 螺旋矩阵 II</a></h3>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象遍历方法</title>
    <link href="/2023/11/20/%E5%AF%B9%E8%B1%A1%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/20/%E5%AF%B9%E8%B1%A1%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>学习：<a href="https://zhuanlan.zhihu.com/p/566208201?utm_id=0">前端必需知道的7种JS对象遍历方法 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>滑动窗口</title>
    <link href="/2023/11/19/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2023/11/19/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>例题：<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组 - 力扣（LeetCode）</a></p><ol><li>暴力求解：<a href="https://www.bilibili.com/video/BV12V4y1G7gi/?spm_id_from=333.337.search-card.all.click&vd_source=23bd401d624705d861aac58086950d57">长度最小的子数组/暴力解法/力扣209_哔哩哔哩_bilibili</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> minSubArrayLen = <span class="hljs-keyword">function</span> (<span class="hljs-params">target, nums</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-title class_">Infinity</span>, sum = <span class="hljs-number">0</span>, subLength = <span class="hljs-number">0</span>;  <span class="hljs-comment">//Infinity无穷大</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;  <span class="hljs-comment">//起点</span><br>        sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i; j &lt; nums.<span class="hljs-property">length</span>; j++) &#123;   <span class="hljs-comment">//终点</span><br>            sum += nums[j];  <span class="hljs-comment">//计算子数组的和</span><br>            <span class="hljs-keyword">if</span> (sum &gt;= target) &#123;<br>                subLength = j - i + <span class="hljs-number">1</span>;<br>                result = result &lt; subLength ? result : subLength;  <span class="hljs-comment">//始终存储最小长度</span><br>                <span class="hljs-keyword">break</span>;   <span class="hljs-comment">//直接跳出本次循环</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result == <span class="hljs-title class_">Infinity</span> ? <span class="hljs-number">0</span> : result;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>滑动窗口</li></ol><p>  学习参考：<a href="https://www.bilibili.com/video/BV1u24y1D7aU/?spm_id_from=333.337.search-card.all.click&vd_source=23bd401d624705d861aac58086950d57">力扣209 长度最小的子数组_哔哩哔哩_bilibili</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> minSubArrayLen = <span class="hljs-keyword">function</span> (<span class="hljs-params">target, nums</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-title class_">Infinity</span>, sum = <span class="hljs-number">0</span>, subLength = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nums.<span class="hljs-property">length</span>; j++) &#123;  <span class="hljs-comment">//扩大窗口(sum &lt; target)</span><br>        sum += nums[j];<br>        <span class="hljs-keyword">while</span> (sum &gt;= target) &#123;  <span class="hljs-comment">//缩小窗口(sum &gt;= target)</span><br>            subLength = j - i + <span class="hljs-number">1</span>;<br>            result = result &lt; subLength ? result : subLength; <span class="hljs-comment">//始终存储最小长度</span><br>            sum -= nums[i++]; <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result == <span class="hljs-title class_">Infinity</span> ? <span class="hljs-number">0</span> : result;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><h3 id="1-水果成篮"><a href="#1-水果成篮" class="headerlink" title="1. 水果成篮"></a>1. <a href="https://leetcode.cn/problems/fruit-into-baskets/">水果成篮</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> totalFruit = <span class="hljs-keyword">function</span> (<span class="hljs-params">fruits</span>) &#123;<br>    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>, len = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; fruits.<span class="hljs-property">length</span>; j++) &#123; <span class="hljs-comment">//右边界向由左滑动，扩大窗口</span><br>        map.<span class="hljs-title function_">set</span>(fruits[j], (map.<span class="hljs-title function_">get</span>(fruits[j]) || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (map.<span class="hljs-property">size</span> &gt; <span class="hljs-number">2</span>) &#123;<br>            map.<span class="hljs-title function_">set</span>(fruits[i], map.<span class="hljs-title function_">get</span>(fruits[i]) - <span class="hljs-number">1</span>);  <span class="hljs-comment">//左边界向由右滑动，缩小窗口</span><br>            <span class="hljs-keyword">if</span> (map.<span class="hljs-title function_">get</span>(fruits[i]) == <span class="hljs-number">0</span>) &#123;<br>                map.<span class="hljs-title function_">delete</span>(fruits[i]);  <span class="hljs-comment">//去除长度减小为0的果树</span><br>            &#125;<br>            i++;<br>        &#125;<br>        len = j - i + <span class="hljs-number">1</span>;<br>        result = result &gt; len ? result : len;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="2-最小覆盖子串"><a href="#2-最小覆盖子串" class="headerlink" title="2. 最小覆盖子串"></a>2. <a href="https://leetcode.cn/problems/minimum-window-substring/">最小覆盖子串</a></h3><p>困难！</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Map和Set</title>
    <link href="/2023/11/18/Map%E5%92%8CSet/"/>
    <url>/2023/11/18/Map%E5%92%8CSet/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Set"><a href="#1-Set" class="headerlink" title="1.Set"></a>1.Set</h2><p>Set 是一种不可变的集合，它用于存储唯一的值。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>);<br>mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>);<br>mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mySet); <span class="hljs-comment">// 输出：[1, 2, 3]</span><br></code></pre></td></tr></table></figure><p>方法：</p><ul><li><p><code>add(value)</code>：同 <code>set</code> 方法，用于向 Set 集合中添加一个值。如果该值已经存在，则不执行任何操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>);<br>mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>);<br>mySet.<span class="hljs-property">size</span>; <span class="hljs-comment">// 输出：2</span><br></code></pre></td></tr></table></figure></li><li><p><code>has(value)</code>：检查 Set 集合中是否存在某个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mySet.<span class="hljs-title function_">has</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 输出：true</span><br></code></pre></td></tr></table></figure></li><li><p><code>delete(value)</code>：删除 Set 集合中的第一个匹配的值。返回被删除的值（如果存在）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br>mySet.<span class="hljs-title function_">delete</span>(<span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mySet); <span class="hljs-comment">// 输出：Set(2) &#123;1, 3&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>size</code>：返回 Set 集合中的元素数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mySet.<span class="hljs-property">size</span>); <span class="hljs-comment">// 输出：3</span><br></code></pre></td></tr></table></figure></li><li><p><code>clear()</code>：清空 Set 集合中的所有元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br>mySet.<span class="hljs-title function_">clear</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mySet); <span class="hljs-comment">// 输出：Set(0)（空集）</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-Map"><a href="#2-Map" class="headerlink" title="2. Map"></a>2. Map</h2><p>Map 是一种关联式集合，它由键值对（key-value pairs）组成。</p><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">1</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap); <span class="hljs-comment">// 输出：Map(2) &#123; &#x27;key1&#x27; =&gt; 1, &#x27;key2&#x27; =&gt; 2 &#125;</span><br></code></pre></td></tr></table></figure><p>方法：</p><ul><li><p><code>set(key, value)</code>：向 Map 对象中添加一个键值对。如果该键已存在，则更新其对应的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">1</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap); <span class="hljs-comment">// 输出：Map(2) &#123; &#x27;key1&#x27; =&gt; 1, &#x27;key2&#x27; =&gt; 2 &#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>get(key)</code>：根据键名获取对应的值。如果键不存在，返回 <code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">1</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;key1&#x27;</span>)); <span class="hljs-comment">// 输出：1</span><br></code></pre></td></tr></table></figure></li><li><p><code>has(key)</code>：检查 Map 对象中是否存在某个键。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;key1&#x27;</span>)); <span class="hljs-comment">// 输出：true</span><br></code></pre></td></tr></table></figure></li><li><p><code>delete(key)</code>：删除 Map 对象中指定键名的键值对。返回被删除的值（如果存在）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">1</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-number">2</span>);<br>myMap.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;key1&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap); <span class="hljs-comment">// 输出：Map(1) &#123; &#x27;key2&#x27; =&gt; 2 &#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>size</code>：返回 Map 对象中的键值对数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">1</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap.<span class="hljs-property">size</span>); <span class="hljs-comment">// 输出：2</span><br></code></pre></td></tr></table></figure></li><li><p><code>clear()</code>：清空 Map 对象中的所有键值对。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">1</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-number">2</span>);<br>myMap.<span class="hljs-title function_">clear</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap); <span class="hljs-comment">// 输出：Map(0)（空映射）</span><br></code></pre></td></tr></table></figure><h2 id="3-常见的场景和建议："><a href="#3-常见的场景和建议：" class="headerlink" title="3.常见的场景和建议："></a>3.常见的场景和建议：</h2></li></ul><ol><li><p>需要确保元素唯一性：如果要存储的元素具有唯一性，Set 更适合。因为 Set 内部已经实现了唯一性检查，无需额外操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>);<br>mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>);<br>mySet.<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li><li><p>需要通过键获取值：如果需要存储键值对，并且需要通过键来访问对应的值，那么 Map 更适合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">1</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;key1&#x27;</span>)); <span class="hljs-comment">// 输出：1</span><br></code></pre></td></tr></table></figure></li><li><p>排序：如果需要对存储的元素进行排序，Set 并不适用，因为 Set 内部不保证元素的顺序。在这种情况下，可以使用 Map 对象的 <code>sort()</code> 方法对键值对进行排序。需要注意的是，这种排序是基于键的顺序，而不是值的顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-number">3</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-number">1</span>);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key3&#x27;</span>, <span class="hljs-number">2</span>);<br>myMap.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.<span class="hljs-property">key</span> - b.<span class="hljs-property">key</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myMap); <span class="hljs-comment">// 输出：Map(3) &#123; &#x27;key1&#x27; =&gt; 3, &#x27;key2&#x27; =&gt; 1, &#x27;key3&#x27; =&gt; 2 &#125;</span><br></code></pre></td></tr></table></figure></li><li><p>存储复杂对象：如果需要存储的对象具有复杂结构，Set 和 Map 都可以使用。但考虑到 Map 的键值对结构，存储和检索复杂对象时，Map 可能更具优势。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>mySet.<span class="hljs-title function_">add</span>(&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> &#125;);<br>mySet.<span class="hljs-title function_">add</span>(&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span> &#125;);<br><br><span class="hljs-keyword">const</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> &#125;);<br>myMap.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>ES6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>let和var、const的区别</title>
    <link href="/2023/11/18/let%E5%92%8Cvar%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/11/18/let%E5%92%8Cvar%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>const是常量，不能重复赋值。</li><li><strong>初始值设置：</strong> 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</li><li><strong>块作用域</strong>：let和const具有块级作用域，var不存在块级作用域。块级作用域解决了两个问题：<ul><li>内层变量可能覆盖外层变量</li><li>用来计数的循环变量泄露为全局变量</li></ul></li><li><strong>变量提升：</strong> var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</li><li><strong>暂时性死区：</strong> 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。</li></ol><table><thead><tr><th align="left"><strong>区别</strong></th><th align="center"><strong>var</strong></th><th align="center"><strong>let</strong></th><th align="center"><strong>const</strong></th></tr></thead><tbody><tr><td align="left">是否必须设置初始值</td><td align="center">×</td><td align="center">×</td><td align="center">✔️</td></tr><tr><td align="left">能否重复声明变量</td><td align="center">✔️</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="left">是否有块级作用域</td><td align="center">×</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="left">是否存在变量提升</td><td align="center">✔️</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="left">是否存在暂时性死区</td><td align="center">×</td><td align="center">✔️</td><td align="center">✔️</td></tr></tbody></table><p>建议：默认用const，需要变化的时候用let</p>]]></content>
    
    
    <categories>
      
      <category>ES6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>箭头函数</title>
    <link href="/2023/11/18/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <url>/2023/11/18/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ol><li>能够使函数的写法更简洁(一行写完一个函数!)</li><li>函数返回值可以被隐式返回(不需要写return了)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">identity</span> = (<span class="hljs-params"></span>) =&gt;  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I am an identity function&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">square</span> = a =&gt; a * a;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b;<br></code></pre></td></tr></table></figure></li><li>没有 <code>this</code> 属性：箭头函数不会拥有自己的 <code>this</code> 值，而是继承父作用域的 <code>this</code>。在一些情况下可能会导致意外的结果，例如在事件处理程序中。在处理这种情况时，可以使用 <code>bind</code> 方法将箭头函数的 <code>this</code> 值绑定到特定对象，以避免意外结果。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br><br><span class="hljs-comment">//箭头函数的 this 值默认指向全局对象（在浏览器中是 window 对象），因此输出的是按钮元素的文本内容。</span><br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">textContent</span>);<br>&#125;);<br><br><span class="hljs-comment">// 绑定箭头函数的 this 值到 button ，元素即在点击按钮时输出按钮的文本内容。</span><br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">textContent</span>);<br>&#125;.<span class="hljs-title function_">bind</span>(button));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ES6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Axios使用</title>
    <link href="/2023/11/16/axios%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/16/axios%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>官方文档：<a href="https://www.axios-http.cn/docs/api_intro">Axios API | Axios中文文档 | Axios中文网 (axios-http.cn)</a></p><h2 id="Vue项目中全局调用"><a href="#Vue项目中全局调用" class="headerlink" title="Vue项目中全局调用"></a>Vue项目中全局调用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">import axios from &#x27;axios&#x27;<br><br>Vue.prototype.$axios = axios;<br></code></pre></td></tr></table></figure><h2 id="方法中调用"><a href="#方法中调用" class="headerlink" title="方法中调用"></a>方法中调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>       <span class="hljs-title function_">addList</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;http://localhost:3002/api/list/add&quot;</span>,&#123;<span class="hljs-attr">content</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span>&#125;)<br>           .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span>&#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;待办事项发布成功&#x27;</span>, response.<span class="hljs-property">data</span>);<br>           &#125;)<br>           .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;  <br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;发布待办事项失败&#x27;</span>, error);  <br>           &#125;);<br>       &#125;,<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Axios</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>生命周期（四个阶段，八个钩子函数）</title>
    <link href="/2023/11/16/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2023/11/16/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>写的很好：<a href="https://juejin.cn/post/6874855535234170887#heading-14">Vue生命周期详解 📌 - 掘金 (juejin.cn)</a></p><p><strong>四个阶段</strong>：创建 –&gt; 挂载 –&gt; 更新 –&gt; 销毁</p><p><strong>八个钩子函数</strong></p><table><thead><tr><th>钩子函数</th><th>时间</th><th>功能</th></tr></thead><tbody><tr><td>beforeCreate</td><td>初始化界面前</td><td></td></tr><tr><td>created</td><td>初始化界面后</td><td>数据初始化</td></tr><tr><td>beforeMount</td><td>渲染DOM前</td><td></td></tr><tr><td>mounted</td><td>渲染DOM后</td><td>数据完成双向绑定，可以访问到Dom节点</td></tr><tr><td>beforeUpdate</td><td>更新数据前</td><td></td></tr><tr><td>updated</td><td>更新数据后</td><td></td></tr><tr><td>beforeDestroy</td><td>卸载组件前</td><td>清除计时器</td></tr><tr><td>destroyed</td><td>卸载组建后</td><td>组件已被拆解，数据绑定被卸除，事件监听器被移除，所有子实例也统统被销毁。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue组件间传值</title>
    <link href="/2023/11/16/%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
    <url>/2023/11/16/%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.jb51.net/javascript/295289h94.htm#_label0">vue组件间传值的6种方法总结_vue.js</a></p><h2 id="1-父组件给子组件传值"><a href="#1-父组件给子组件传值" class="headerlink" title="1.父组件给子组件传值"></a>1.父组件给子组件传值</h2><p>在Vue.js中，父组件可以通过props属性将数据传递给子组件。以下是一个简单的例子：</p><p>父组件（ParentComponent.vue）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">child-component</span> <span class="hljs-attr">:message</span>=<span class="hljs-string">&quot;parentMessage&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ChildComponent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ChildComponent.vue&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">ChildComponent</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">parentMessage</span>: <span class="hljs-string">&#x27;这是父组件传递的消息&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这个例子中，父组件通过将 <code>parentMessage</code> 属性绑定到子组件的 <code>message</code> prop上来将数据传递给子组件。子组件可以使用这个 <code>message</code> prop来显示或处理这个传递过来的值。</p><h2 id="2-子组件给父组件传值"><a href="#2-子组件给父组件传值" class="headerlink" title="2.子组件给父组件传值"></a>2.子组件给父组件传值</h2><p>在Vue中，子组件可以通过<code>$emit</code>方法向父组件传递数据。以下是一个示例：</p><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">child-component</span> @<span class="hljs-attr">child-event</span>=<span class="hljs-string">&quot;handleChildEvent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ChildComponent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ChildComponent.vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">ChildComponent</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">handleChildEvent</span>(<span class="hljs-params">eventData</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 在这里接收子组件传递的数据</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(eventData)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;emitEvent&quot;</span>&gt;</span>向父组件传值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">emitEvent</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> eventData = <span class="hljs-string">&#x27;这是子组件传递的数据&#x27;</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;child-event&#x27;</span>, eventData) <span class="hljs-comment">// 触发自定义事件并传递数据给父组件</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，子组件定义了一个名为<code>emitEvent</code>的方法，该方法通过<code>$emit</code>方法触发了一个名为<code>child-event</code>的自定义事件，并将数据<code>eventData</code>传递给父组件。父组件通过监听<code>child-event</code>事件接收到子组件传递的数据，并在<code>handleChildEvent</code>方法中进行处理。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>移除元素</title>
    <link href="/2023/11/15/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <url>/2023/11/15/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p><a href="https://leetcode.cn/problems/remove-element/">力扣题目链接</a></p><p>快慢指针法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeElement = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, val</span>) &#123;<br>    <span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-property">length</span>;i++)&#123;<br>       <span class="hljs-keyword">if</span>(nums[i]!=val)&#123;<br>            nums[j++]=nums[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><h3 id="1-删除排序数组中的重复项"><a href="#1-删除排序数组中的重复项" class="headerlink" title="1. 删除排序数组中的重复项"></a>1. <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">删除排序数组中的重复项</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) &#123;<br>    <span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;nums.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[j]!=nums[i]) nums[++j]=nums[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j+<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-移动零"><a href="#2-移动零" class="headerlink" title="2. 移动零"></a>2. <a href="https://leetcode.cn/problems/move-zeroes/">移动零</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> moveZeroes = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) &#123;<br>    <span class="hljs-keyword">var</span> k=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">0</span>) k++;<br>        <span class="hljs-keyword">else</span> nums[j++] = nums[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(k)&#123;<br>        nums[nums.<span class="hljs-property">length</span>-k]=<span class="hljs-number">0</span>;<br>        k--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-比较含退格的字符串"><a href="#3-比较含退格的字符串" class="headerlink" title="3. 比较含退格的字符串"></a>3. <a href="https://leetcode.cn/problems/backspace-string-compare/">比较含退格的字符串</a></h3><p>讲的真好：<a href="https://www.bilibili.com/video/BV1954y1Q7dX/">Leetcode刷题 844. 比较含退格的字符串 Backspace String Compare_哔哩哔哩</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> backspaceCompare = <span class="hljs-keyword">function</span> (<span class="hljs-params">s, t</span>) &#123;<br>    <span class="hljs-keyword">let</span> i = s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>, j = t.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">//倒着处理，绝了！</span><br>    <span class="hljs-keyword">let</span> backSpaceS = <span class="hljs-number">0</span>, backSpaceT = <span class="hljs-number">0</span>;  <span class="hljs-comment">//需要记录‘#’的个数</span><br>    <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&quot;#&quot;</span>) &#123;<br>                backSpaceS++;<br>                i--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (backSpaceS) &#123;  <span class="hljs-comment">//消耗‘#’的作用</span><br>                i--;<br>                backSpaceS--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//保证当前i指向一个有效字母</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (t[j] == <span class="hljs-string">&quot;#&quot;</span>) &#123;<br>                backSpaceT++;<br>                j--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (backSpaceT) &#123;<br>                j--;<br>                backSpaceT--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s[i] != t[j]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        i--;<br>        j--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-有序数组的平方"><a href="#4-有序数组的平方" class="headerlink" title="4. 有序数组的平方"></a>4. <a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">有序数组的平方</a></h3><p>双指针！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sortedSquares = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>    <span class="hljs-keyword">let</span> newNums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(nums.<span class="hljs-property">length</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>),k=newNums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> l = <span class="hljs-number">0</span>; r = nums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l&lt;=r) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(nums[l]) &gt;= <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(nums[r])) &#123;<br>            newNums[k]=nums[l] * nums[l];<br>            k--;<br>            l++<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            newNums[k]=nums[r] * nums[r];<br>            k--;<br>            r--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newNums;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2023/11/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/11/14/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="二分查找-数组有序"><a href="#二分查找-数组有序" class="headerlink" title="二分查找(数组有序)"></a>二分查找(数组有序)</h2><p><a href="https://leetcode.cn/problems/binary-search/"> 二分查找 - 力扣（LeetCode）</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> search = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>  <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span>,high = nums.<span class="hljs-property">length</span> -<span class="hljs-number">1</span>,middle=<span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>    middle = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((low+high)/<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(target&gt;nums[middle]) low = middle+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&lt;nums[middle]) high = middle-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> middle;<br>  &#125;<br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><h3 id="1-搜索插入位置"><a href="#1-搜索插入位置" class="headerlink" title="1. 搜索插入位置"></a>1. <a href="https://programmercarl.com/0035.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.html">搜索插入位置</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> searchInsert = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-keyword">let</span> low=<span class="hljs-number">0</span>,high=nums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>,middle=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>        middle = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((low+high)/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(target&gt;nums[middle]) low = middle+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&lt;nums[middle]) high = middle-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> middle;<br>    &#125;<br>    <span class="hljs-keyword">return</span> low;  <span class="hljs-comment">//退出循环的时候，high+1=low，并且low和high指向和target数值大小最接近的值的索引</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-在排序数组中查找元素的第一个和最后一个位置"><a href="#2-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="2. 在排序数组中查找元素的第一个和最后一个位置"></a>2. <a href="https://www.bilibili.com/video/BV1wy4y1k76F/?spm_id_from=333.337.search-card.all.click&vd_source=23bd401d624705d861aac58086950d57">在排序数组中查找元素的第一个和最后一个位置</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> searchRange = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <br>    <span class="hljs-comment">//左边界</span><br>    <span class="hljs-keyword">var</span> searchLeftBoard = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums,target</span>)&#123;<br>        <span class="hljs-keyword">let</span> left= <span class="hljs-number">0</span> , right = nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            <span class="hljs-keyword">let</span> middle = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((right+left)/<span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(target==nums[middle])&#123;<br>                <span class="hljs-keyword">if</span>(middle==<span class="hljs-number">0</span> || nums[middle-<span class="hljs-number">1</span>]!=target)&#123;  <span class="hljs-comment">//mid为第一个元素或者mid前一个元素不等于target</span><br>                    <span class="hljs-keyword">return</span> middle;  <br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    right = middle - <span class="hljs-number">1</span>;  <span class="hljs-comment">//缩小查找区间</span><br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&gt;nums[middle]) left = middle+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(target&lt;nums[middle]) right = middle-<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//右边界</span><br>    <span class="hljs-keyword">var</span> searchRightBoard = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums,target</span>)&#123;<br>        <span class="hljs-keyword">let</span> left= <span class="hljs-number">0</span> , right = nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            <span class="hljs-keyword">let</span> middle = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((right+left)/<span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(target==nums[middle])&#123;<br>                <span class="hljs-keyword">if</span>(middle==nums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span> || nums[middle+<span class="hljs-number">1</span>]!=target)&#123;  <span class="hljs-comment">//mid为最后一个元素或者mid后一个元素不等于target</span><br>                    <span class="hljs-keyword">return</span> middle;  <br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    left = middle + <span class="hljs-number">1</span>;  <span class="hljs-comment">//缩小查找区间</span><br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&gt;nums[middle]) left = middle+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(target&lt;nums[middle]) right = middle-<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>   <span class="hljs-keyword">var</span> leftboard = <span class="hljs-title function_">searchLeftBoard</span>(nums,target);<br>   <span class="hljs-keyword">var</span> rightboard = <span class="hljs-title function_">searchRightBoard</span>(nums,target);<br>   <span class="hljs-keyword">return</span> [leftboard,rightboard]; <br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-x-的平方根"><a href="#3-x-的平方根" class="headerlink" title="3. x 的平方根"></a>3. <a href="https://leetcode.cn/problems/sqrtx/">x 的平方根</a></h3><p>   逻辑简单：<a href="https://www.bilibili.com/video/BV16L411P7Ju/?spm_id_from=333.337.search-card.all.click&vd_source=23bd401d624705d861aac58086950d57">【LeetCode 每日一题】69. x 的平方根 | 手写图解版思路 + 代码讲解_哔哩哔哩_bilibili</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mySqrt = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">var</span> l =<span class="hljs-number">0</span>,r = x;<br>    <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>        <span class="hljs-keyword">var</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((l+r)/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(mid*mid == x) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mid*mid&gt;x) r = mid-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mid*mid &lt;x)&#123;  <span class="hljs-comment">//分情况讨论</span><br>            <span class="hljs-keyword">if</span> ((mid+<span class="hljs-number">1</span>)*(mid+<span class="hljs-number">1</span>)&gt;x) <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> l = mid+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-有效的完全平方数"><a href="#4-有效的完全平方数" class="headerlink" title="4. 有效的完全平方数"></a>4. <a href="https://leetcode.cn/problems/valid-perfect-square/">有效的完全平方数</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPerfectSquare = <span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-keyword">let</span> l = <span class="hljs-number">0</span>,r = num;<br>    <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>        <span class="hljs-keyword">let</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((l+r)/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(mid*mid == num) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mid*mid &lt; num) l=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r=mid-<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组常用方法</title>
    <link href="/2023/11/13/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/13/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-改变原数组的方法"><a href="#1-改变原数组的方法" class="headerlink" title="1. 改变原数组的方法"></a>1. 改变原数组的方法</h2><table><thead><tr><th>方法名</th><th>功能</th><th>返回值</th></tr></thead><tbody><tr><td>push()</td><td>末尾添加数据</td><td>新数组长度</td></tr><tr><td>pop()</td><td>末尾出删除数据</td><td>被删除的数据</td></tr><tr><td>unshift()</td><td>头部添加数据</td><td>新数组长度</td></tr><tr><td>shift()</td><td>头部删除数据</td><td>被删除的数据</td></tr><tr><td>reverse()</td><td>翻转数组</td><td>反转后的数组</td></tr><tr><td>sort()</td><td>排序</td><td>新数组</td></tr><tr><td>splice()</td><td>截取数组：**数组名.splice(开始索引,多少个,要插入的数据)</td><td>新数组，里面就是你截取出来的数据</td></tr></tbody></table><h2 id="2-不改变原数组的方法"><a href="#2-不改变原数组的方法" class="headerlink" title="2. 不改变原数组的方法"></a>2. 不改变原数组的方法</h2><table><thead><tr><th>方法名</th><th>功能</th><th>返回值</th></tr></thead><tbody><tr><td>concat()</td><td>合并数组</td><td>新数组</td></tr><tr><td>join()</td><td>数组转字符串：<strong>数组名.join(‘</strong> <strong>连接符’)</strong></td><td>拼接后的字符串</td></tr><tr><td>slice()</td><td>截取数组的一部分数据：<strong>数组名.slice(</strong> <strong>开始索引,</strong> **结束索引) **  包前不包后</td><td>新数组</td></tr><tr><td>indexOf()</td><td>从左检查数组中有没有这个数值</td><td>存在该元素，返回<strong>第一次</strong>出现的索引，不存在返回 -1</td></tr><tr><td>lastIdexOf()</td><td>从右检查数组中有没有这个数值</td><td>存在该元素，返回<strong>第一次</strong>出现的索引，不存在返回 -1</td></tr></tbody></table><h2 id="3-ES6新增的数组方法"><a href="#3-ES6新增的数组方法" class="headerlink" title="3. ES6新增的数组方法"></a>3. ES6新增的数组方法</h2><table><thead><tr><th>方法名</th><th>功能</th><th>返回值</th></tr></thead><tbody><tr><td>forEach()</td><td>代替for：<strong>数组名.forEach(function (item,index,arr) {})</strong></td><td>undefined</td></tr><tr><td>map()</td><td>映射数组：<strong>数组名.map(function (item,index,arr) {})</strong></td><td>新数组，这个数组和原数组长度一样</td></tr><tr><td>filter()</td><td>过滤数组</td><td>满足条件的元素组成的新数组</td></tr><tr><td>every()</td><td>判断数组是不是满足所有条件</td><td>全都满足返回true 只要有一个不满足返回false</td></tr><tr><td>some()</td><td>数组中有没有满足条件的</td><td>只要有一个元素满足条件就返回true，都不满足返回false</td></tr><tr><td>find()</td><td>用来获取数组中满足条件的数据</td><td>满足条件第一个元素，否则返回undefined</td></tr><tr><td>reduce()</td><td>叠加后的效果：<strong>数组名.reduce(function (prev,item,index,arr) {},初始值)</strong></td><td>就是叠加后的结果</td></tr></tbody></table><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h2><table><thead><tr><th>方法名</th><th>功能</th><th>返回值</th></tr></thead><tbody><tr><td>includes()</td><td>判断一个数组是否包含一个指定的值</td><td>存在返回 true，否则false</td></tr><tr><td>Array.from()</td><td>接收伪数组，返回对应的真数组</td><td>对应的真数组</td></tr><tr><td>findIndex()</td><td>遍历数组，执行回调函数，回调函数接受一个条件，返回满足条件的第一个元素下标，不存在返回-1</td><td>满足条件第一个元素下标，不存在返回-1</td></tr><tr><td>fill()</td><td>用给定值填充一个数组</td><td>新数组</td></tr><tr><td>flat()</td><td>变成一维的数组</td><td>新数组</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组遍历方法</title>
    <link href="/2023/11/13/%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/13/%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>方法</th><th>特点</th></tr></thead><tbody><tr><td>forEach()</td><td>不改变原数组，没有返回值</td></tr><tr><td>map()</td><td>不改变原数组，有返回值，可链式调用</td></tr><tr><td>filter()</td><td>过滤数组，返回包含符合条件的元素的数组，可链式调用</td></tr><tr><td>for…of</td><td>返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环</td></tr><tr><td>every() 和 some()</td><td>some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false</td></tr><tr><td>find() 和 findIndex()</td><td>find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td></tr><tr><td>reduce() 和 reduceRight()</td><td>reduce()对数组正序操作；reduceRight()对数组逆序操作</td></tr></tbody></table><h2 id="1-forEach和map方法有什么区别"><a href="#1-forEach和map方法有什么区别" class="headerlink" title="1.forEach和map方法有什么区别"></a>1.forEach和map方法有什么区别</h2><p>这方法都是用来遍历数组的，两者区别如下：</p><ul><li>forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法<strong>没有返回值</strong>；</li><li>map()方法不会改变原数组的值，<strong>返回一个新数组</strong>，新数组中的值为原数组调用函数处理之后的值；</li></ul>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OSI参考模型</title>
    <link href="/2023/11/13/OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/11/13/OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p><img src="/img/OSI%E7%9A%84%E7%BB%93%E6%9E%84.png"></p><h3 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1.应用层"></a>1.应用层</h3><ul><li>因为用户的实际应用多种多样，就要求应用层采用不同的协议来解决不同应用类型的需求</li><li>典型的协议有：文件传输协议FTP、电子邮件协议SMTP、万维网HTTP等</li></ul><h3 id="2-表示层"><a href="#2-表示层" class="headerlink" title="2.表示层"></a>2.表示层</h3><ul><li>主要处理两个通信系统中交换信息的表示方式</li><li>不同机器采用的编码和表示方法不同，使用的数据结构不同</li><li>为了使不同的数据和信息之间能够互相交换，表示层采用抽象的标准方法定义数据结构<br><img src="/img/%E8%A1%A8%E7%A4%BA%E5%B1%82.png"></li></ul><h3 id="3-会话层"><a href="#3-会话层" class="headerlink" title="3.会话层"></a>3.会话层</h3><ul><li>会话层允许不同主机上的各个进程进行会话</li><li>会话层利用传输层提供的<code>端到端</code>的服务，向表示层提供它的增值服务</li></ul><h3 id="4-传输层"><a href="#4-传输层" class="headerlink" title="4.传输层"></a>4.传输层</h3><ul><li>单位是报文段（TCP）或用户数据报（UDP）</li><li>负责主机中两个进程之间的通信，功能是为<code>端到端</code>连接提供可靠的传输服务，为端到端连接提供流量控制、差错控制、服务质量、数据传输管理等服务。<br><img src="/img/%E4%BC%A0%E8%BE%93%E5%B1%82.png"></li></ul><h3 id="5-网络层"><a href="#5-网络层" class="headerlink" title="5.网络层"></a>5.网络层</h3><ul><li><code>无连接</code>的网际协议和许多<code>路由</code>选择协议，因此因特网的网络层也称<code>网际层</code>或IP层</li></ul><p><img src="/img/%E7%BD%91%E7%BB%9C%E5%B1%82.png"></p><h3 id="6-数据链路层"><a href="#6-数据链路层" class="headerlink" title="6.数据链路层"></a>6.数据链路层</h3><ul><li><code>点到点</code>通信</li></ul><p><img src="/img/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82.png"></p><h3 id="7-物理层"><a href="#7-物理层" class="headerlink" title="7.物理层"></a>7.物理层</h3><p><img src="/img/%E7%89%A9%E7%90%86%E5%B1%82.png"></p><h2 id="OSI数据传输图"><a href="#OSI数据传输图" class="headerlink" title="OSI数据传输图"></a>OSI数据传输图</h2><p><img src="/img/OSI%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%9B%BE.png"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络体系结构</title>
    <link href="/2023/11/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <url>/2023/11/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43914604/article/details/104722679?spm=1001.2014.3001.5506">《王道计算机网络》学习笔记总目录+思维导图</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>计算机网络是一些<code>互联的、自治的计算机系统的集合</code></p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ol><li><code>硬件</code>主要由主机(也称端系统)，通信链路(如双绞线、光纤)、交换设备(如路由、交换机等)和通信处理机(如网卡)等组成</li><li><code>软件</code>主要包括各种实现资源共享的软件和方便用户使用的各种工具软件(如网络操作系统、邮件收发程序、FTP程序、聊天程序等)。</li><li><code>协议</code>是计算机网络的<strong>核心</strong>，协议规定了网络传输数据时所遵循的规范。就如同我们现实生活中的法律一样，网络世界也必须遵循一定的规则。</li></ol><h2 id="功能组成"><a href="#功能组成" class="headerlink" title="功能组成"></a>功能组成</h2><p>计算机网络由<code>通信子网和资源子网</code>组成</p><p><img src="/img/%E5%8A%9F%E8%83%BD%E7%BB%84%E6%88%90.png"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>数据通信：计算机网络最基本和最重要的功能</li><li>资源共享：软件共享、数据共享和硬件共享</li><li>分布式处理</li><li>提高可靠性</li><li>负载均衡</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="1-分布范围分类"><a href="#1-分布范围分类" class="headerlink" title="1.分布范围分类"></a>1.分布范围分类</h3><table><thead><tr><th>类型</th><th>概念</th></tr></thead><tbody><tr><td>广域网（WAN）</td><td><code>几十千米到几千千米</code>的区域</td></tr><tr><td>城域网（MAN）</td><td>跨越几个街区甚至整个城市，覆盖范围约<code>5~50km</code></td></tr><tr><td>局域网（LAN）</td><td><code>几十米到几千米</code>的区域</td></tr><tr><td>个人区域网（PAN）</td><td><code>十米</code>左右</td></tr></tbody></table><h3 id="2-传输技术分类"><a href="#2-传输技术分类" class="headerlink" title="2.传输技术分类"></a>2.传输技术分类</h3><ul><li><code>广播式网络</code>：所有联网计算机都共享一个<code>公共通信信道</code>。当一台计算机利用<code>共享通信信道</code>发送报文分组时，所有其他计算机都会收听到这个分组。接受到该分组的计算机将通过检查目的地之来决定是否接受该分组。</li><li><code>点对点网络</code>：每条物理线路连接一对计算机。</li></ul><h3 id="3-拓扑结构分类"><a href="#3-拓扑结构分类" class="headerlink" title="3.拓扑结构分类"></a>3.拓扑结构分类</h3><p>总线形、星形、环形、网状形</p><p><img src="/img/%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB.png"></p><h3 id="4-交换技术分类"><a href="#4-交换技术分类" class="headerlink" title="4.交换技术分类"></a>4.交换技术分类</h3><ul><li><p><code>电路交换网络</code>：在源结点和目的结点之间建立起一条专用的通路用于传输数据，包括建立连接（占用通信资源）、传输数据（一直占用通信资源）和断开连接（释放通信资源）三个阶段。最典型的电路交换网是<strong>传统电话网络</strong>。该类网络的特点是整个报文的比特流连续的从源点直达终点，好像在一条管道中传送。</p></li><li><p><code>报文交换网络</code>：也称<code>存储-转发网络</code>。用户数据加上源地址、目的地址、校验码等辅助信息，然后封装成报文、这个报文传送到相邻结点，全部存储后，再转发给下一个结点，重复这一过程直到到达目的结点，每个报文可以单独选择到达目的结点的路径。</p></li><li><p><code>分组交换网络</code>：也称<code>包交换网络</code>。其原理是将数据分成较短的固定长度的数据块，在每个数据块中加上目的地址、源地址等辅助信息组成分组（包），以<code>储存-转发方式</code>传输。</p></li></ul><p><img src="/img/%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF%E5%88%86%E7%B1%BB.png"></p><h2 id="协议的组成"><a href="#协议的组成" class="headerlink" title="协议的组成"></a>协议的组成</h2><ul><li><code>语义</code>：做什么</li><li><code>语法</code>：怎么做</li><li><code>同步</code>：什么时候做</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见的DOM操作</title>
    <link href="/2023/11/12/%E5%B8%B8%E8%A7%81%E7%9A%84DOM%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/11/12/%E5%B8%B8%E8%A7%81%E7%9A%84DOM%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="1-查询元素节点"><a href="#1-查询元素节点" class="headerlink" title="1.查询元素节点"></a>1.查询元素节点</h2><p><code>getElementById(id)</code>：根据元素的id属性获取元素节点。</p><p><code>getElementsByTagName(tagName)</code>：根据标签名获取元素节点列表。</p><p><code>getElementsByClassName(className)</code>：根据类名获取元素节点列表。</p><p><code>querySelector(selector)</code>：根据选择器获取符合条件的第一个元素节点。</p><p><code>querySelectorAll(selector)</code>：根据选择器获取所有符合条件的元素节点列表。</p><h2 id="2-创建节点"><a href="#2-创建节点" class="headerlink" title="2.创建节点"></a>2.创建节点</h2><p><code>createElement(tagName)</code>：创建一个新的元素节点。</p><p><code>createTextNode(text)</code>：创建一个包含指定文本内容的文本节点。</p><p><code>createComment(text)</code>：创建一个注释节点。</p><h2 id="3-修改节点"><a href="#3-修改节点" class="headerlink" title="3.修改节点"></a>3.修改节点</h2><p><code>appendChild(node)</code>：将指定节点作为最后一个子节点添加到目标节点。</p><p><code>insertBefore(newNode, referenceNode)</code>：将新节点插入到参考节点之前。</p><p><code>replaceChild(newNode, oldNode)</code>：用新节点替换旧节点。</p><p><code>removeChild(node)</code>：从父节点中移除指定节点。</p><p><code>setAttribute(name, value)</code>：设置元素节点的属性。</p><p><code>removeAttribute(name)</code>：移除元素节点的属性。</p><h2 id="4-节点遍历"><a href="#4-节点遍历" class="headerlink" title="4.节点遍历"></a>4.节点遍历</h2><p><code>parentNode</code>：获取父节点。</p><p><code>childNodes</code>：获取子节点列表。</p><p><code>firstChild</code>：获取第一个子节点。</p><p><code>lastChild</code>：获取最后一个子节点。</p><p><code>previousSibling</code>：获取前一个兄弟节点。</p><p><code>nextSibling</code>：获取后一个兄弟节点。</p><h2 id="5-修改样式"><a href="#5-修改样式" class="headerlink" title="5.修改样式"></a>5.修改样式</h2><p><code>classList</code>：获取或修改元素节点的类名。</p><p><code>style.property</code>：设置元素节点的样式属性，如<code>element.style.color = &quot;red&quot;</code>。</p><h2 id="6-事件处理"><a href="#6-事件处理" class="headerlink" title="6.事件处理"></a>6.事件处理</h2><p><code>addEventListener(event, callback)</code>：为元素节点添加事件监听器。</p><p><code>removeEventListener(event, callback)</code>：移除元素节点的事件监听器。</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>transform</title>
    <link href="/2023/11/11/transform/"/>
    <url>/2023/11/11/transform/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.w3school.com.cn/cssref/pr_transform.asp">transform</a> 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p><h2 id="CSS-2D-转换方法"><a href="#CSS-2D-转换方法" class="headerlink" title="CSS 2D 转换方法"></a>CSS 2D 转换方法</h2><p>通过使用 CSS <code>transform</code> 属性，可以利用以下 2D 转换方法：</p><ul><li><code>translate()</code> 从其当前位置移动元素（根据为 X 轴和 Y 轴指定的参数）。</li><li><code>rotate( deg)</code> 根据给定的角度顺时针或逆时针旋转元素</li><li><code>scale()</code> 增加或减少元素的大小（根据给定的宽度和高度参数）。</li><li><code>skew()</code> 使元素沿 X 和 Y 轴倾斜给定角度。</li><li><code>matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())</code></li></ul><h2 id="CSS-3D-转换方法"><a href="#CSS-3D-转换方法" class="headerlink" title="CSS 3D 转换方法"></a>CSS 3D 转换方法</h2><p>通过 CSS <code>transform</code> 属性，可以使用以下 3D 转换方法：</p><ul><li><code>rotateX()</code> 使元素绕其 X 轴旋转给定角度</li><li><code>rotateY()</code> 使元素绕其 Y 轴旋转给定角度</li><li><code>rotateZ() </code>方法使元素绕其 Z 轴旋转给定角度</li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用的正则表达式</title>
    <link href="/2023/11/10/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/11/10/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式 – 语法 | 菜鸟教程 (runoob.com)</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 匹配日期，如 yyyy-mm-dd 格式</span><br><span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span>;<br><br><span class="hljs-comment">//匹配 qq 号</span><br><span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/^[1-9][0-9]&#123;4,10&#125;$/g</span>;<br><br><span class="hljs-comment">//手机号码正则</span><br><span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/^1[34578]\d&#123;9&#125;$/g</span>;<br><br><span class="hljs-comment">// 用户名正则</span><br><span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/^[a-zA-Z\$][a-zA-Z0-9_\$]&#123;4,16&#125;$/</span>;<br></code></pre></td></tr></table></figure><h2 id="1-RegExp对象方法"><a href="#1-RegExp对象方法" class="headerlink" title="1.RegExp对象方法"></a>1.RegExp对象方法</h2><p><code>exec()</code> 方法：测试字符串中的匹配项。如果找到匹配项，则返回结果数组，否则返回 <code>null</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;The best things in life are free&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">RegExp</span> = <span class="hljs-regexp">/e/</span>;<br><span class="hljs-keyword">var</span> result = <span class="hljs-title class_">RegExp</span>.<span class="hljs-title function_">exec</span>(text);  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">//e</span><br></code></pre></td></tr></table></figure><p><code>test()</code>方法：用于检测一个字符串是否匹配某个模式；如果字符串中有匹配的值返回 <code>true</code> ，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;Hello world!&quot;</span>;<br><span class="hljs-keyword">var</span> pat=<span class="hljs-regexp">/Hello/g</span>;<br><span class="hljs-keyword">var</span> result=pat.<span class="hljs-title function_">test</span>(str);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="2-支持正则表达式的String对象的方法"><a href="#2-支持正则表达式的String对象的方法" class="headerlink" title="2.支持正则表达式的String对象的方法"></a>2.支持正则表达式的String对象的方法</h2><p><code>search()</code>方法：用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。<br>如果找到任何匹配的子串，则返回该子串在原字符串中的第一次出现的位置。否则返回 -1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;hello 123 world 456&#x27;</span>;<br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/\d+/</span>; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str1.<span class="hljs-title function_">search</span>(reg1));<span class="hljs-comment">//6  匹配到数字1</span><br></code></pre></td></tr></table></figure><p><code>replace()</code>方法：用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。原字符串不变，创建一个新的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;hello world! hello world! hello world!&quot;</span>; <br><span class="hljs-keyword">var</span> n=str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str) <span class="hljs-comment">//Runoob world! Runoob world! Runoob world!</span><br></code></pre></td></tr></table></figure><p><code>match()</code>方法：可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。<br><strong>注意：</strong> match() 方法将检索字符串 String，以找到一个或多个与 regexp 匹配的文本。<br>            如果 regexp 没有标志 g，那么 match() 方法就只能执行一次匹配<br>            如果 regexp 有标志 g，它将找到全部符合正则子字符串，并返回一个数组。<br>            如果没有找到任何匹配的文本，match() 将返回 null。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;The rain in SPAIN stays mainly in the plain&quot;</span>; <br><span class="hljs-keyword">var</span> n=str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ain/g</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n); <span class="hljs-comment">//[&quot;ain&quot;, &quot;ain&quot;, &quot;ain&quot;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS动画</title>
    <link href="/2023/11/09/CSS%E5%8A%A8%E7%94%BB/"/>
    <url>/2023/11/09/CSS%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h1><h2 id="1-CSS-Transition"><a href="#1-CSS-Transition" class="headerlink" title="1.CSS Transition"></a>1.CSS Transition</h2><p>CSS 过渡，属于<strong>补间动画</strong>，即设置关键帧的初始状态，然后在另一个关键帧改变这个状态，比如大小、颜色、透明度等，浏览器将自动根据二者之间帧的值创建的动画。</p><ul><li><code>transition-property</code>    指定使用过渡效果的css属性</li><li><code>transition-duration</code>    设置过渡动画持续时间</li><li><code>transition-timing-function</code>    设置动画的时间函数。</li></ul><table><thead><tr><th align="left">属性</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">linear</td><td align="left">动画从头到尾的速度是相同的</td></tr><tr><td align="left">ease</td><td align="left">动画以低速开始，然后加快，在结束前变慢</td></tr><tr><td align="left">ease-in</td><td align="left">动画以低速开始</td></tr><tr><td align="left">ease-out</td><td align="left">动画以低速结束</td></tr><tr><td align="left">ease-in-out</td><td align="left">动画以低速开始和结束</td></tr></tbody></table><ul><li><code>transition-delay</code>    设置动画的延迟时间</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">transition</span>: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-CSS-Animation"><a href="#2-CSS-Animation" class="headerlink" title="2.CSS Animation"></a>2.CSS Animation</h2><p>CSS 动画，可以理解是 <code>CSS Transition</code> 的加强版，它既可以实现 <strong>补间动画</strong> 的动画效果，也可以使其以 <strong>逐帧动画</strong> 的方式进行绘制。</p><ol><li><p> 通过<code>@keyframes</code>自定义关键帧动画并为动画命名，可以在其中对每一帧进行设置。</p></li><li><p> 使用自定义动画的元素，通过<code>animation</code>相关属性进行配置:</p></li></ol><ul><li><p><code>animation-name</code>   规定需要绑定到选择器的 keyframe 名称。</p></li><li><p><code>animation-duration</code>   规定完成动画所花费的时间，以秒或毫秒计。</p></li><li><p><code>animation-timing-function</code>   规定动画的速度曲线。</p></li><li><p><code>animation-delay</code>   规定在动画开始之前的延迟。</p></li><li><p><code>animation-iteration-count</code>   规定动画应该播放的次数。</p></li><li><p><code>animation-direction</code>   规定是否应该轮流反向播放动画。</p></li></ul><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><p>keyframes(关键帧)，在css样式表中可以通过<code>@keyframes</code>来设置关键帧动画，并指定动画名称供使用者锁定。</p><p>其语法如下：</p><p>我们可以通过百分比来设置具体帧数的样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-keyword">@keyframes</span> animateName&#123;<br>    <span class="hljs-number">0%</span>   &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>; &#125;<br>    <span class="hljs-number">50%</span>  &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>; &#125;<br>    <span class="hljs-number">100%</span> &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>0%</code>和<code>100%</code>代表<code>首尾帧</code>,也可分别使用<code>from</code>、<code>to</code>替代。下面代码与上述代码效果相同</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-keyword">@keyframes</span> animateName&#123;<br>    <span class="hljs-selector-tag">from</span> &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>; &#125;<br>    <span class="hljs-number">50%</span>  &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>; &#125;<br>    <span class="hljs-selector-tag">to</span> &#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是： 若自定义动画<strong>未定义首尾帧</strong>，则首尾帧将会<strong>应用使用者的原有样式</strong>，现在动画定义完毕，使用者需要配置<code>animation</code>相关属性对动画进行配置。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>::before 和 ::after 的双冒号和单冒号有什么区别？</title>
    <link href="/2023/11/09/before%20%E5%92%8C%20after%20%E7%9A%84%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <url>/2023/11/09/before%20%E5%92%8C%20after%20%E7%9A%84%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<ul><li><p>冒号(<code>:</code>)用于<code>CSS3</code>伪类，双冒号(<code>::</code>)用于<code>CSS3</code>伪元素。 </p></li><li><p> <code>::before</code>就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于<code>dom</code>之中，只存在在页面之中。</p></li><li><p><code>:before </code>和 <code>:after</code> 这两个伪元素，是在<code>CSS2.1</code>里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着<code>Web</code>的进化，在<code>CSS3</code>的规范里，伪元素的语法被修改成使用双冒号，成为<code>::before</code>、<code>::after</code>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>两栏布局</title>
    <link href="/2023/11/09/%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    <url>/2023/11/09/%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>一般两栏布局指的是<strong>左边一栏宽度固定，右边一栏宽度自适应</strong>，两栏布局的具体实现：</p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ol><li>将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outer</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">width</span>: auto;<br>  <span class="hljs-attribute">background</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden </p><p>这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;<br>     <span class="hljs-attribute">float</span>: left;<br>     <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>     <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>     <span class="hljs-attribute">background</span>: red;<br> &#125;<br> <span class="hljs-selector-class">.right</span>&#123;<br>     <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>     <span class="hljs-attribute">background</span>: blue;<br>     <span class="hljs-attribute">overflow</span>: hidden;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outer</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">background</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ol><li>将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outer</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outer</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>响应式布局--@media 媒体查询</title>
    <link href="/2023/11/09/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/11/09/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="响应式设计与自适应设计的区别？"><a href="#响应式设计与自适应设计的区别？" class="headerlink" title="响应式设计与自适应设计的区别？"></a>响应式设计与自适应设计的区别？</h2><ul><li><p><strong>响应式设计</strong>：响应式<strong>开发一套界面</strong>，通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容。</p></li><li><p><strong>自适应设计</strong>：自适应需要<strong>开发多套界面</strong>，通过检测视口分辨率，来判断当前访问的设备是 <code>PC</code> 端、平板还是手机，从而请求服务层，返回不同的页面。</p></li></ul><h2 id="如何选取？"><a href="#如何选取？" class="headerlink" title="如何选取？"></a>如何选取？</h2><ul><li><p>页面不是太复杂的情况下，采用响应式布局的方式</p></li><li><p>页面中信息较多，布局较为复杂的情况，采用自适应布局的方式</p></li></ul><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p><strong>Media Query 原理</strong>：允许添加表达式用以媒体查询（包括 <strong>媒体类型</strong> 和 <strong>媒体特性</strong>），以此来选择不同的样式表，从而自动适应不同的屏幕分辨率</p><h3 id="1-使用方式"><a href="#1-使用方式" class="headerlink" title="1.使用方式"></a>1.使用方式</h3><ul><li>通过 <code>link</code> 标签中判断设备的尺寸，从而引用不同的 <code>css</code> 样式文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- style.css 样式被用在宽度小于或等于 480px 的手持设备上，或者被用于屏幕宽度大于或等于 960px 的设备上 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;handheld and (max-width:480px), screen and (min-width:960px)&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Media_queries">@media</a>  判断设备的尺寸应用不同的 <code>css</code> 样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">// 屏幕大于 <span class="hljs-number">1024px</span> 或小于 <span class="hljs-number">1440px</span> 时应用该样式<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1024px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1440px</span>) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-响应式设计实践"><a href="#2-响应式设计实践" class="headerlink" title="2.响应式设计实践"></a>2.响应式设计实践</h3><ol><li>设置 meta 标签</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用 @media 设置样式</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">// 屏幕大于 <span class="hljs-number">1440px</span> 时应用该样式<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1441px</span>) &#123; <br>  ...<br>&#125;<br><br>// 屏幕大于 <span class="hljs-number">1024px</span> 或小于 <span class="hljs-number">1440px</span> 时应用该样式<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1024px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1440px</span>) &#123; <br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong>设置布局分界点时需要注意样式的先后顺序，后面的 <code>@media</code> 范围不应该包含前面的范围（满足条件时，后面的样式会覆盖前面的样式）</p><h2 id="常见的屏幕尺寸"><a href="#常见的屏幕尺寸" class="headerlink" title="常见的屏幕尺寸"></a>常见的屏幕尺寸</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">yaml复制代码分辨率</span>   <span class="hljs-string">比例</span> <span class="hljs-string">|</span> <span class="hljs-string">设备尺寸</span><br><br><span class="hljs-number">1024</span> <span class="hljs-string">*</span> <span class="hljs-number">500</span><span class="hljs-string">（8.9</span> <span class="hljs-string">寸）</span><br><span class="hljs-number">1024</span> <span class="hljs-string">*</span> <span class="hljs-number">768</span><span class="hljs-string">（4</span> <span class="hljs-string">:</span> <span class="hljs-number">3</span>  <span class="hljs-string">|</span> <span class="hljs-number">10.4</span> <span class="hljs-string">寸、12.1</span> <span class="hljs-string">寸、14.1</span> <span class="hljs-string">寸、15</span> <span class="hljs-string">寸）</span><br><span class="hljs-number">1280</span> <span class="hljs-string">*</span> <span class="hljs-number">800</span><span class="hljs-string">（16</span> <span class="hljs-string">:</span> <span class="hljs-number">10</span>  <span class="hljs-string">|15.4</span> <span class="hljs-string">寸）</span><br><span class="hljs-number">1280</span> <span class="hljs-string">*</span> <span class="hljs-number">1024</span><span class="hljs-string">（5：4</span>  <span class="hljs-string">|</span> <span class="hljs-number">14.1</span><span class="hljs-string">寸、15.0寸）</span><br><span class="hljs-number">1280</span> <span class="hljs-string">*</span> <span class="hljs-number">854</span><span class="hljs-string">（15</span> <span class="hljs-string">:</span> <span class="hljs-number">10</span> <span class="hljs-string">|</span> <span class="hljs-number">15.2</span><span class="hljs-string">）</span><br><span class="hljs-number">1366</span> <span class="hljs-string">*</span> <span class="hljs-number">768</span><span class="hljs-string">（16：9</span> <span class="hljs-string">|</span> <span class="hljs-string">不常见）</span><br><span class="hljs-number">1440</span> <span class="hljs-string">*</span> <span class="hljs-number">900</span><span class="hljs-string">（16：10</span>  <span class="hljs-number">17</span><span class="hljs-string">寸</span> <span class="hljs-string">仅苹果用）</span><br><span class="hljs-number">1440</span> <span class="hljs-string">*</span> <span class="hljs-number">1050</span><span class="hljs-string">（5：4</span>  <span class="hljs-string">|</span> <span class="hljs-number">14.1</span><span class="hljs-string">寸、15.0寸）</span><br><span class="hljs-number">1600</span> <span class="hljs-string">*</span> <span class="hljs-number">1024</span><span class="hljs-string">（14：9</span> <span class="hljs-string">|</span> <span class="hljs-string">不常见）</span><br><span class="hljs-number">1600</span> <span class="hljs-string">*</span> <span class="hljs-number">1200</span><span class="hljs-string">（4：3</span> <span class="hljs-string">|</span> <span class="hljs-number">15</span><span class="hljs-string">、16.1）</span><br><span class="hljs-number">1680</span> <span class="hljs-string">*</span> <span class="hljs-number">1050</span><span class="hljs-string">（16：10</span> <span class="hljs-string">|</span> <span class="hljs-number">15.4</span><span class="hljs-string">寸、20.0寸）</span><br><span class="hljs-number">1920</span> <span class="hljs-string">*</span> <span class="hljs-number">1200</span><span class="hljs-string">（23寸）</span><br></code></pre></td></tr></table></figure><h2 id="Sass结合媒体查询"><a href="#Sass结合媒体查询" class="headerlink" title="Sass结合媒体查询"></a>Sass结合媒体查询</h2><h3 id="1-嵌套媒体查询"><a href="#1-嵌套媒体查询" class="headerlink" title="1. 嵌套媒体查询"></a>1. 嵌套媒体查询</h3><p>结合 <a href="https://www.sass.hk/guide/">Sass</a> 的特性可以使用嵌套媒体查询来编写样式，而其相较于 <code>css</code> 媒体查询主要优点在于：</p><ul><li><p>可以将 <code>@media</code> 样式写在相应元素样式上下文附近，而不是在样式的文件最底部或单独的样式文件中编写，更利于后期的维护。</p></li><li><p>针对不同的屏幕尺寸会选择合适的<strong>布局分界点</strong>，而且这些分界点可能是会发生变化的。对此，如果将分界点值提取作为<strong>变量</strong>统一起来管理相信是更为方便的，而 <code>sass</code> 就可以做到这点。</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// theme.scss</span><br><span class="hljs-variable">$width-small</span>: <span class="hljs-number">375px</span>;<br><span class="hljs-variable">$width-medium</span>: <span class="hljs-number">768px</span>;<br><span class="hljs-variable">$width-large</span>: <span class="hljs-number">1440px</span>;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.demo</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-variable">$width-large</span>) &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>    &#125;<br>    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-variable">$width-medium</span>) &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    &#125;<br>   <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-variable">$width-small</span>) &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>除了可以将分界点提取作为变量之外，进一步，我们也可以用一个变量定义整个媒体查询</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$mobile-first</span>: <span class="hljs-string">&quot;screen and (min-width: 375px)&quot;</span>;<br><br><span class="hljs-keyword">@media</span> #&#123;<span class="hljs-variable">$mobile-first</span>&#125; &#123;<br>    <span class="hljs-selector-id">#demo</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">60%</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/2023/11/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2023/11/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><p> <a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">十大经典排序算法 </a></p><p><img src="/img/sort.png"></p><p>测试：<a href="https://leetcode.cn/problems/sort-an-array/">912. 排序数组 - 力扣（LeetCode）</a></p><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bubbleSort</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>;j&lt;arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>-i;j++)&#123;  <span class="hljs-comment">//j&lt;arr.length-1-i，i的每一趟会确定一个数的位置</span><br>            <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">var</span> temp=arr[j];<br>                arr[j]=arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>]=temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h2><p>首先在未排序序列中找到最小元素，存放到排序序列的起始位置。再从剩余未排序元素中继续寻找最小元素，然后放到已排序序列的末尾。重复，直到所有元素均排序完毕。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectionSort</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">var</span> minIndex = i;   <span class="hljs-comment">//始终用minIndex保存最小值的位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i+<span class="hljs-number">1</span>;j&lt;arr.<span class="hljs-property">length</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[j]&lt;arr[minIndex]) minIndex = j; <br>        &#125;<br>        <span class="hljs-keyword">var</span> temp = arr[i];<br>        arr[i]=arr[minIndex];<br>        arr[minIndex]=temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h2><p>将第一个元素看做一个有序序列S，把第二个元素到最后一个元素当成是未排序序列U。从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">insertionSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">var</span> current=arr[i];<br>        <span class="hljs-keyword">var</span> preIndex = i-<span class="hljs-number">1</span>;  <span class="hljs-comment">//每次存储S的最后一个元素的位置</span><br>        <span class="hljs-keyword">while</span>(preIndex&gt;=<span class="hljs-number">0</span> &amp;&amp;arr[preIndex]&gt;current)&#123;  <span class="hljs-comment">//判断条件</span><br>            arr[preIndex+<span class="hljs-number">1</span>] = arr[preIndex];<br>            preIndex--;<br>        &#125;<br>    arr[preIndex+<span class="hljs-number">1</span>]=current;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4.归并排序"></a>4.归并排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeSort</span>(<span class="hljs-params">arr</span>) &#123; <br>    <span class="hljs-keyword">var</span> len = arr.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">if</span>(len &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <span class="hljs-keyword">var</span> middle = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(len / <span class="hljs-number">2</span>),  <span class="hljs-comment">//拆分数组</span><br>        left = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, middle),<br>        right = arr.<span class="hljs-title function_">slice</span>(middle);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(<span class="hljs-title function_">mergeSort</span>(left), <span class="hljs-title function_">mergeSort</span>(right));  <span class="hljs-comment">//递归</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">left, right</span>)<br>&#123;<br>    <span class="hljs-keyword">var</span> result = [];  <span class="hljs-comment">//创建新数组</span><br>    <br>    <span class="hljs-keyword">while</span> (left.<span class="hljs-property">length</span> &amp;&amp; right.<span class="hljs-property">length</span>) &#123;   <span class="hljs-comment">//当其中一个数组长度为0时，跳出循环</span><br>    <span class="hljs-comment">//shift()用于把数组的第一个元素从其中删除，并返回第一个元素的值。 注意： 此方法改变数组的长度！   </span><br>        <span class="hljs-keyword">if</span> (left[<span class="hljs-number">0</span>] &lt;= right[<span class="hljs-number">0</span>]) result.<span class="hljs-title function_">push</span>(left.<span class="hljs-title function_">shift</span>());  <br>        <span class="hljs-keyword">else</span>  result.<span class="hljs-title function_">push</span>(right.<span class="hljs-title function_">shift</span>());<br>    &#125;<br><br>   <span class="hljs-keyword">while</span> (left.<span class="hljs-property">length</span>) result.<span class="hljs-title function_">push</span>(left.<span class="hljs-title function_">shift</span>());   <span class="hljs-comment">//合并剩余的数组</span><br>   <span class="hljs-keyword">while</span> (right.<span class="hljs-property">length</span>) result.<span class="hljs-title function_">push</span>(right.<span class="hljs-title function_">shift</span>());      <br>    <br>   <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5.堆排序"></a>5.堆排序</h2><p><img src="/img/Heap.png"></p><p>一下看懂：<a href="https://www.bilibili.com/video/BV1fp4y1D7cj/?spm_id_from=333.337.search-card.all.click&vd_source=23bd401d624705d861aac58086950d57">排序算法：堆排序【图解+代码】_哔哩哔哩_bilibili</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">heapSort</span>(<span class="hljs-params">nums</span>)&#123;<br>   <span class="hljs-keyword">let</span> n =nums.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i =<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((n-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>);i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-title function_">heapify</span>(nums,n,i);  <span class="hljs-comment">//构建初始的最大堆</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=n-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">let</span> temp =nums[<span class="hljs-number">0</span>];<br>        nums[<span class="hljs-number">0</span>] = nums[i];<br>        nums[i]= temp;<br>        <span class="hljs-title function_">heapify</span>(nums,i,<span class="hljs-number">0</span>); <span class="hljs-comment">//维护被换的根点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> nums;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">heapify</span>(<span class="hljs-params">nums,n,i</span>)&#123;<br>    <span class="hljs-keyword">let</span> largest = i,left = <span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>,right =<span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">if</span>(left&lt;n &amp;&amp; nums[largest] &lt; nums[left]) largest = left;<br>    <span class="hljs-keyword">if</span>(right&lt;n &amp;&amp; nums[largest] &lt; nums[right]) largest = right;<br><span class="hljs-comment">// 如果最大值节点不是当前节点，交换当前节点和最大值节点的值，并递归调用heapify函数以保持最大堆性质</span><br>    <span class="hljs-keyword">if</span>(largest!=i)&#123;<br>        <span class="hljs-keyword">let</span> temp = nums[i];<br>        nums[i] =nums[largest];<br>        nums[largest] = temp;<br>        <span class="hljs-title function_">heapify</span>(nums,n,largest);  <span class="hljs-comment">//维护被替换为孩子的节点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6.快速排序"></a>6.快速排序</h2><p>一下看懂：<a href="https://www.bilibili.com/video/BV1vP411g7J3/?spm_id_from=333.337.search-card.all.click&vd_source=23bd401d624705d861aac58086950d57">全网最清晰快速排序，看完快排思想和代码全部通透，不通透你打我！_哔哩哔哩_bilibili</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">quickSort</span>(<span class="hljs-params">arr, low = <span class="hljs-number">0</span>, high = arr.length - <span class="hljs-number">1</span></span>) &#123;  <br>  <span class="hljs-keyword">if</span> (low &lt; high) &#123;  <span class="hljs-comment">//判断左右指针之间是否有元素</span><br>    <span class="hljs-keyword">let</span> pivotIndex = <span class="hljs-title function_">partition</span>(arr, low, high);  <br>    <span class="hljs-title function_">quickSort</span>(arr, low, pivotIndex - <span class="hljs-number">1</span>);  <br>    <span class="hljs-title function_">quickSort</span>(arr, pivotIndex + <span class="hljs-number">1</span>, high);  <br>  &#125;  <br>  <span class="hljs-keyword">return</span> arr;  <br>&#125;  <br>  <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">partition</span>(<span class="hljs-params">arr, low, high</span>) &#123;  <br>  <span class="hljs-keyword">let</span> pivot = arr[low];  <br>  <span class="hljs-keyword">while</span>(low &lt; high)&#123;<br>    <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; arr[high] &gt;= pivot)  high--;<br>    arr[low] = arr[high];  <span class="hljs-comment">//不满足条件放进空位置</span><br>    <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; arr[low] &lt;= pivot)  low++;<br>    arr[high] = arr[low];  <span class="hljs-comment">//不满足条件放进空位置</span><br>  &#125;<br>  arr[low] = pivot;  <span class="hljs-comment">//此时low == high，且指向基准将要放置的位置</span><br>  <span class="hljs-keyword">return</span> low;   <span class="hljs-comment">// 返回分区位置的索引  </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-计数排序（整数排序算法）"><a href="#7-计数排序（整数排序算法）" class="headerlink" title="7.计数排序（整数排序算法）"></a>7.计数排序（整数排序算法）</h2><p>因为数组的下标是天然排好序的（从小到大），所以我们进行<strong>计数数组的下标</strong>与<strong>原数组的值</strong>进行关联。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">countingSort</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr;<br>  <span class="hljs-comment">// 找出数组中的最大值，确定计数数组的长度</span><br>  <span class="hljs-keyword">let</span> max = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...arr);<br>    <br>  <span class="hljs-comment">//  计算每个元素的频率，存储在计数数组中  </span><br>  <span class="hljs-keyword">let</span> counts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(max + <span class="hljs-number">1</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    counts[arr[i]]++;<br>  &#125;<br><br>  <span class="hljs-comment">// 根据计数数组重新排序原数组</span><br>  <span class="hljs-keyword">let</span> sortedIndex = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; counts.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">while</span> (counts[i] &gt; <span class="hljs-number">0</span>) &#123;<br>      arr[sortedIndex++] = i;  <br>      counts[i]--;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th align="center"></th><th align="left">函数</th><th align="left">变量</th></tr></thead><tbody><tr><td align="center">冒泡排序</td><td align="left">for 嵌套 for</td><td align="left">temp</td></tr><tr><td align="center">选择排序</td><td align="left">for 嵌套 for</td><td align="left">minIndex、temp</td></tr><tr><td align="center">插入排序</td><td align="left">for 嵌套 while</td><td align="left">current、preIndex</td></tr><tr><td align="center">归并排序</td><td align="left">mergeSort(nums)、merge(left,right)</td><td align="left">middle、result[ ]</td></tr><tr><td align="center">堆排序</td><td align="left">heapSort()、heapify()</td><td align="left">largest</td></tr><tr><td align="center">快速排序</td><td align="left">quickSort(nums,low=0,high=nums.length-1)、partition(nums,low,high)</td><td align="left">low、high、pivot</td></tr><tr><td align="center">计数排序</td><td align="left">for、for 嵌套 while</td><td align="left">max、counts[ ]、sortedIndex</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串中出现最多的字符及出现次数</title>
    <link href="/2023/11/06/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <url>/2023/11/06/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="统计字符串中出现最多的字符及出现次数"><a href="#统计字符串中出现最多的字符及出现次数" class="headerlink" title="统计字符串中出现最多的字符及出现次数"></a>统计字符串中出现最多的字符及出现次数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;helloJavascripthellohtmlhellocss&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getMaxCount</span>(str));<br><br><span class="hljs-comment">//方法一：用对象&#123;&#125;处理数据</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMaxCount</span>(<span class="hljs-params">str</span>)&#123;<br>    <span class="hljs-keyword">var</span> obj=&#123;&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-property">length</span>;i++)&#123;<br>        obj[str[i]]?obj[str[i]]++:obj[str[i]]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> maxCount=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> maxCountChar=<span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj)&#123;<br>        <span class="hljs-keyword">if</span>(obj[key]&gt;maxCount) &#123;<br>            maxCount=obj[key];<br>            maxCountChar=key;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;出现最多次的值为&#x27;</span>+maxCountChar+<span class="hljs-string">&#x27;,出现次数为&#x27;</span>+maxCount;<br>&#125;<br><br><span class="hljs-comment">//方法二：将字符串排序再匹配拆分，将相同的数组组合在一起，判断字符出现次数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMaxCount</span>(<span class="hljs-params">str</span>)&#123;<br>    <span class="hljs-keyword">var</span> maxCount=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> maxCountChar=<span class="hljs-string">&#x27;&#x27;</span>;<br>    str =str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">sort</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">var</span> arr =str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(\w)\1+/g</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">var</span> length=arr[i].<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">if</span>(length&gt;maxCount)  &#123;<br>            maxCount=length;<br>            maxCountChar = arr[i][<span class="hljs-number">0</span>];<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;出现最多次的值为&#x27;</span>+maxCountChar+<span class="hljs-string">&#x27;,出现次数为&#x27;</span>+maxCount;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="去除字符串中重复的字符"><a href="#去除字符串中重复的字符" class="headerlink" title="去除字符串中重复的字符"></a>去除字符串中重复的字符</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;helloJavascripthellohtmlhellocss&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(str));<br><br><span class="hljs-comment">//方法一：用对象&#123;&#125;处理数据</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">str</span>)&#123;<br>    <span class="hljs-keyword">var</span> obj=&#123;&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-property">length</span>;i++)&#123;<br>        obj[str[i]]?obj[str[i]]++:obj[str[i]]=<span class="hljs-number">1</span>;<br>    &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>); <br>&#125;<br><br><span class="hljs-comment">//方法二：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">str</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">call</span>(str,<span class="hljs-function">(<span class="hljs-params">char,index,arr</span>)=&gt;</span>arr.<span class="hljs-title function_">indexOf</span>(char)===index).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//方法三：借助ES6中的Set数据结构</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">str</span>)&#123;<br>    <span class="hljs-keyword">var</span> set = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>))]; <br>    <span class="hljs-keyword">return</span> set.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>); <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="判断一个字符串是否为回文字符串"><a href="#判断一个字符串是否为回文字符串" class="headerlink" title="判断一个字符串是否为回文字符串"></a>判断一个字符串是否为回文字符串</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindromic</span>(<span class="hljs-params">str</span>)&#123;<br>   str = str.<span class="hljs-title function_">toLowerCase</span>();<br>   <span class="hljs-keyword">var</span> arr = [...str];<br>   <span class="hljs-keyword">var</span> reverseStr = arr.<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>   <span class="hljs-keyword">return</span> reverseStr === str; <br>&#125;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;acA&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isPalindromic</span>(str));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFC</title>
    <link href="/2023/11/06/BFC/"/>
    <url>/2023/11/06/BFC/</url>
    
    <content type="html"><![CDATA[<p><code>BFC</code>（块格式化上下文）是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局。</p><h1 id="创建BFC"><a href="#创建BFC" class="headerlink" title="创建BFC"></a>创建BFC</h1><ul><li>float的值不是none</li><li>position的值为absolute或fixed</li><li>display的值是inline-block、flex、table-caption、table-cell</li><li>overflow：hidden</li></ul><h1 id="BFC解决了什么问题"><a href="#BFC解决了什么问题" class="headerlink" title="BFC解决了什么问题"></a>BFC解决了什么问题</h1><p>参考：<a href="https://juejin.cn/post/6950082193632788493">面试官：请说说什么是BFC？</a></p><h2 id="1-使用Float脱离文档流，高度塌陷"><a href="#1-使用Float脱离文档流，高度塌陷" class="headerlink" title="1.使用Float脱离文档流，高度塌陷"></a>1.使用Float脱离文档流，高度塌陷</h2><h2 id="2-Margin重叠"><a href="#2-Margin重叠" class="headerlink" title="2.Margin重叠"></a>2.Margin重叠</h2><h2 id="3-两栏布局"><a href="#3-两栏布局" class="headerlink" title="3.两栏布局"></a>3.两栏布局</h2>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS画三角形和0.5px的线</title>
    <link href="/2023/11/06/CSS%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2%E5%92%8C0.5px%E7%9A%84%E7%BA%BF/"/>
    <url>/2023/11/06/CSS%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2%E5%92%8C0.5px%E7%9A%84%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS实现三角形"><a href="#CSS实现三角形" class="headerlink" title="CSS实现三角形"></a>CSS实现三角形</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br> <span class="hljs-selector-class">.triangle</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">border</span>: <span class="hljs-number">100px</span> solid;<br>        <span class="hljs-attribute">border-top</span>: <span class="hljs-number">100px</span> solid transparent; <br>        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">100px</span> solid transparent;<br>        <span class="hljs-attribute">border-left</span>: <span class="hljs-number">100px</span> solid transparent;<br>        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">100px</span> solid orangered;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/triangle.png"></p><h1 id="如何画一条0-5px的线"><a href="#如何画一条0-5px的线" class="headerlink" title="如何画一条0.5px的线"></a>如何画一条0.5px的线</h1><ul><li>移动端<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;meta name=&quot;viewport&quot; <br>      <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, <br>      initial-scale=<span class="hljs-number">0.5</span>, minimum-scale=<span class="hljs-number">0.5</span>, maximum-scale=<span class="hljs-number">0.5</span>&quot;/&gt;<br></code></pre></td></tr></table></figure></li><li>transform实现<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid red;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0.5</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flex布局</title>
    <link href="/2023/11/06/flex%E5%B8%83%E5%B1%80/"/>
    <url>/2023/11/06/flex%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="Flex-布局教程：语法篇-阮一峰"><a href="#Flex-布局教程：语法篇-阮一峰" class="headerlink" title="Flex 布局教程：语法篇 - 阮一峰"></a><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇 - 阮一峰</a></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span><span class="hljs-selector-class">.flex-direction</span>  主轴的方向  row | row-reverse | column | column-reverse<br><span class="hljs-number">2</span><span class="hljs-selector-class">.justify-content</span>  主轴上的对齐方式 <span class="hljs-attribute">flex</span>-start | <span class="hljs-attribute">flex</span>-end | center | space-between | space-around<br><span class="hljs-number">3</span><span class="hljs-selector-class">.flex-wrap</span>  子元素是否换行 nowrap | wrap | wrap-reverse<br><span class="hljs-number">4</span><span class="hljs-selector-class">.align-items</span> 交叉轴上如何对齐 <span class="hljs-attribute">flex</span>-start | <span class="hljs-attribute">flex</span>-end | center | baseline | stretch<br><span class="hljs-number">5</span><span class="hljs-selector-class">.align-content</span> 多根轴线的对齐方式  <span class="hljs-attribute">flex</span>-start | <span class="hljs-attribute">flex</span>-end | center | space-between | space-around | stretch<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span><span class="hljs-selector-class">.order</span>  定义项目的排列顺序。数值越小，排列越靠前，默认为<span class="hljs-number">0</span>。<br><span class="hljs-number">2</span><span class="hljs-selector-class">.flex-grow</span>  定义项目的放大比例，默认为<span class="hljs-number">0</span>，即如果存在剩余空间，也不放大。<br>如果所有项目的<span class="hljs-attribute">flex-grow</span>属性都为<span class="hljs-number">1</span>，则它们将等分剩余空间（如果有的话）。<br>如果一个项目的<span class="hljs-attribute">flex-grow</span>属性为<span class="hljs-number">2</span>，其他项目都为<span class="hljs-number">1</span>，则前者占据的剩余空间将比其他项多一倍。<br><span class="hljs-number">3</span><span class="hljs-selector-class">.flex-shrink</span>  定义了项目的缩小比例，默认为<span class="hljs-number">1</span>，即如果空间不足，该项目将缩小。<br>  如果所有项目的<span class="hljs-attribute">flex-shrink</span>属性都为<span class="hljs-number">1</span>，当空间不足时，都将等比例缩小。<br>  如果一个项目的<span class="hljs-attribute">flex-shrink</span>属性为<span class="hljs-number">0</span>，其他项目都为<span class="hljs-number">1</span>，则空间不足时，前者不缩小。<br><span class="hljs-number">4</span><span class="hljs-selector-class">.flex-basis</span><br><span class="hljs-number">5</span><span class="hljs-selector-class">.flex</span>  <span class="hljs-attribute">flex</span>属性是<span class="hljs-attribute">flex-grow</span>, <span class="hljs-attribute">flex-shrink</span> 和 <span class="hljs-attribute">flex-basis</span>的简写，auto (<span class="hljs-number">1</span> <span class="hljs-number">1</span> auto) 和 <span class="hljs-attribute">none</span> (<span class="hljs-number">0</span> <span class="hljs-number">0</span> auto)。<br><span class="hljs-number">6</span><span class="hljs-selector-class">.align-self</span> 允许单个项目有与其他项目不一样的对齐方式<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>三栏布局</title>
    <link href="/2023/11/06/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    <url>/2023/11/06/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>  <span class="hljs-selector-id">#header</span>, <span class="hljs-selector-id">#footer</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;<br>  &#125;<br> <br>  <span class="hljs-selector-id">#container</span> &#123;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span> <span class="hljs-number">200px</span>;   <span class="hljs-comment">/* 1.预留 */</span><br>  &#125;<br><br>   <span class="hljs-selector-id">#container</span><span class="hljs-selector-pseudo">:after</span> &#123;  <span class="hljs-comment">/* 2.清除浮动 */</span><br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">display</span>:block;<br>    <span class="hljs-attribute">clear</span>:both;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>  &#125;<br><br>  <span class="hljs-selector-id">#container</span> <span class="hljs-selector-class">.column</span> &#123;   <span class="hljs-comment">/* 3.浮动起来 */</span><br>    <span class="hljs-attribute">float</span>: left;<br>  &#125;<br> <br>  <span class="hljs-selector-id">#center</span> &#123;  <br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;     <span class="hljs-comment">/* 4.占据100% */</span><br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>  &#125;<br> <br>  <span class="hljs-selector-id">#left</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br> <span class="hljs-attribute">background</span>: green;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;  <span class="hljs-comment">/* 向左移动一个center元素的大小 */</span><br>    <span class="hljs-attribute">position</span>:relative;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">200px</span>;          <span class="hljs-comment">/* 向左移动一个自身的大小 */</span><br>  &#125;<br> <br>  <span class="hljs-selector-id">#right</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;     <br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br> <span class="hljs-attribute">background</span>: blue;<br>    <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">200px</span>;   <br>  &#125;<br>&lt;/style&gt;<br> <br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> id=&quot;<span class="hljs-selector-tag">header</span>&quot;&gt;<span class="hljs-selector-id">#header</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> id=&quot;container&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> id=&quot;center&quot; class=&quot;column&quot;&gt;<span class="hljs-selector-id">#center</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> id=&quot;<span class="hljs-attribute">left</span>&quot; class=&quot;column&quot;&gt;<span class="hljs-selector-id">#left</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> id=&quot;<span class="hljs-attribute">right</span>&quot; class=&quot;column&quot;&gt;<span class="hljs-selector-id">#right</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> id=&quot;<span class="hljs-selector-tag">footer</span>&quot;&gt;<span class="hljs-selector-id">#footer</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-class">.column</span> &#123;<br>          <span class="hljs-attribute">float</span>: left;<br>        &#125;<br><br>        <span class="hljs-selector-id">#wrapper</span>&#123;<br>          <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>          <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>          <span class="hljs-attribute">background-color</span>: pink;<br>        &#125;<br><br>        <span class="hljs-selector-id">#wrapper</span> <span class="hljs-selector-id">#center</span>&#123;<br>          <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>          <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> <span class="hljs-number">150px</span> <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;   <span class="hljs-comment">/* 预留 */</span><br>        &#125;<br>       <br>        <span class="hljs-selector-id">#left</span> &#123;<br>          <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>          <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>          <span class="hljs-attribute">background</span>: green;<br>          <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;  <br>        &#125;<br>       <br>        <span class="hljs-selector-id">#right</span> &#123;<br>          <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;     <br>          <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>          <span class="hljs-attribute">background</span>: blue;<br>          <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">150px</span>;   <br>        &#125;<br>&lt;/style&gt;<br>       <br>        &lt;<span class="hljs-selector-tag">div</span> id=&quot;wrapper&quot; class=&quot;column&quot;&gt;<br>            &lt;<span class="hljs-selector-tag">div</span> id=&quot;center&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> id=&quot;<span class="hljs-attribute">left</span>&quot; class=&quot;column&quot;&gt;<span class="hljs-selector-id">#left</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> id=&quot;<span class="hljs-attribute">right</span>&quot; class=&quot;column&quot;&gt;<span class="hljs-selector-id">#right</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th align="center">属性</th><th align="center">圣杯布局</th><th align="center">双飞翼布局</th></tr></thead><tbody><tr><td align="center">HTML</td><td align="center">包裹三栏</td><td align="center">包裹中间一栏</td></tr><tr><td align="center">是否定位</td><td align="center">相对定位</td><td align="center">无需定位</td></tr><tr><td align="center">左右栏空间</td><td align="center">使用padding预留</td><td align="center">使用margin预留</td></tr><tr><td align="center">左栏处理</td><td align="center">position＋margin-left</td><td align="center">margin-left</td></tr><tr><td align="center">右栏处理</td><td align="center">margin-right</td><td align="center">margin-left</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇怪的margin</title>
    <link href="/2023/11/06/%E5%A5%87%E6%80%AA%E7%9A%84margin/"/>
    <url>/2023/11/06/%E5%A5%87%E6%80%AA%E7%9A%84margin/</url>
    
    <content type="html"><![CDATA[<h1 id="1-margin重叠（相邻兄弟元素之间）"><a href="#1-margin重叠（相邻兄弟元素之间）" class="headerlink" title="1.margin重叠（相邻兄弟元素之间）"></a>1.margin重叠（相邻兄弟元素之间）</h1><ul><li><p>只给一个元素设置外边距</p></li><li><p>将其中一个元素放入BFC中，但是这样会改变文档结构</p></li></ul><h1 id="2-margin塌陷（父子元素之间）"><a href="#2-margin塌陷（父子元素之间）" class="headerlink" title="2.margin塌陷（父子元素之间）"></a>2.margin塌陷（父子元素之间）</h1><p>解决办法：</p><ul><li>激活父元素的BFC</li></ul><p>参考：<a href="https://blog.csdn.net/qq_35727582/article/details/122189322">margin塌陷、margin重叠解决方案，你学会了吗？</a></p><h1 id="margin为负值"><a href="#margin为负值" class="headerlink" title="margin为负值"></a>margin为负值</h1><ul><li>margin-top：向上移动</li><li>margin-left：向左移动</li><li>margin-bottom：下侧元素向上移动，自身不受影响</li><li>margin-right：右元素向左移动，自身不受影响</li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>小技巧</title>
    <link href="/2023/11/06/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/11/06/%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<ul><li>引入<strong>reset.css</strong>文件，提高效率  <a href="https://meyerweb.com/eric/tools/css/reset/">CSS Tools: Reset CSS </a></li><li>给body设定<strong>min-width</strong>，避免在手机上查看出现变形</li><li>margin的区域无背景颜色，使用padding</li><li>图片img设定<strong>width: 100%；</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>居中对齐</title>
    <link href="/2023/11/06/%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90/"/>
    <url>/2023/11/06/%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90/</url>
    
    <content type="html"><![CDATA[<h1 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">水平居中：<span class="hljs-attribute">text-align</span>：center;<br>垂直居中：<span class="hljs-attribute">line-height</span>:center;<br></code></pre></td></tr></table></figure><h1 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h1><h2 id="1-定宽高"><a href="#1-定宽高" class="headerlink" title="1.定宽高"></a>1.定宽高</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;<br></code></pre></td></tr></table></figure><h2 id="2-flex布局"><a href="#2-flex布局" class="headerlink" title="2.flex布局"></a>2.flex布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>:flex;<br>justify-align:center;<br><span class="hljs-attribute">align-items</span>:center；<br></code></pre></td></tr></table></figure><h2 id="3-grid布局"><a href="#3-grid布局" class="headerlink" title="3.grid布局"></a>3.grid布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>:grid;<br>place-item:center;<br></code></pre></td></tr></table></figure><h2 id="4-子绝父相-3种"><a href="#4-子绝父相-3种" class="headerlink" title="4.子绝父相(3种)"></a>4.子绝父相(3种)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs css">- 已知子元素宽高<br>父元素&#123;<br>    <span class="hljs-attribute">position</span>：relative·;<br>&#125;<br>子元素&#123;<br>    <span class="hljs-attribute">position</span>：absolute;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin-left</span>: - px; //自身宽度的一半<br>    <span class="hljs-attribute">margin-top</span>:- px; //自身高度的一半<br>&#125;<br><br>- 子元素宽高未知<br>父元素&#123;<br>    <span class="hljs-attribute">position</span>：relative·;<br>&#125;<br>子元素&#123;<br>    <span class="hljs-attribute">position</span>：absolute;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<br>&#125;<br><br>父元素&#123;<br>    <span class="hljs-attribute">position</span>：relative·;<br>&#125;<br>子元素&#123;<br>    <span class="hljs-attribute">position</span>：absolute;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>:auto;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-table-cell"><a href="#5-table-cell" class="headerlink" title="5.table-cell"></a>5.table-cell</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">父元素&#123;<br>    <span class="hljs-attribute">display</span>:table-cell;<br>    <span class="hljs-attribute">vertical-align</span>:middle;<br>    <span class="hljs-attribute">text-align</span>:center;<br>&#125;<br>子元素&#123;<br>    <span class="hljs-attribute">display</span>:inline-block;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>清除浮动</title>
    <link href="/2023/11/06/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <url>/2023/11/06/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>清除浮动</strong>主要是为了解决：当父元素不给高度的时候，内部元素不浮动的时候会撑开，而浮动时父元素会变成一条线，所以这个时候就需要解决浮动</p><h1 id="1-给父元素定义好height高度"><a href="#1-给父元素定义好height高度" class="headerlink" title="1.给父元素定义好height高度"></a>1.给父元素定义好height高度</h1><h1 id="2-父级添加overflow方法"><a href="#2-父级添加overflow方法" class="headerlink" title="2.父级添加overflow方法"></a>2.父级添加overflow方法</h1><p>可以通过触发BFC的方式，实现清除浮动效果。</p><p><strong>必须定义width</strong>，同时<strong>不能定义height</strong>，使用overflow:hidden时，浏览器会自动检查浮动区域的高度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fahter</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-额外标签法"><a href="#3-额外标签法" class="headerlink" title="3.额外标签法"></a>3.额外标签法</h1><p>给谁清除浮动，就在其后额外添加一个空白div标签 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clear</span>&#123;<br>        <span class="hljs-attribute">clear</span>:both;<br>    &#125;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;fahter&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-attribute">float</span>&quot;&gt;浮动了&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-attribute">clear</span>&quot;&gt;额外标签法&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="4-使用after伪元素清除浮动"><a href="#4-使用after伪元素清除浮动" class="headerlink" title="4.使用after伪元素清除浮动"></a>4.使用after伪元素清除浮动</h1><p>:after方式为空元素的升级版，好处是不用单独加标签了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>&#123;     <span class="hljs-comment">/*伪元素是行内元素 正常浏览器清除浮动方法*/</span><br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">display</span>: block;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">clear</span>:both;<br>        <span class="hljs-attribute">visibility</span>: hidden;<br>    &#125;<br><br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;father clearfix&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-attribute">float</span>&quot;&gt;浮动了&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br></code></pre></td></tr></table></figure><h1 id="5-使用before和after双伪元素清除浮动（较常用推荐）"><a href="#5-使用before和after双伪元素清除浮动（较常用推荐）" class="headerlink" title="5. 使用before和after双伪元素清除浮动（较常用推荐）"></a>5. 使用before和after双伪元素清除浮动（较常用推荐）</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attribute">display</span>: table;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br><span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br> &lt;<span class="hljs-selector-tag">div</span> class=&quot;father clearfix&quot;&gt;<br>      &lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-attribute">float</span>&quot;&gt;浮动了&lt;/<span class="hljs-selector-tag">div</span>&gt;<br> &lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐藏元素的方法</title>
    <link href="/2023/11/06/%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <url>/2023/11/06/%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="隐藏元素的方法"><a href="#隐藏元素的方法" class="headerlink" title="隐藏元素的方法"></a>隐藏元素的方法</h1><ol><li><p><strong>display: none</strong></p></li><li><p><strong>visibility: hidden</strong></p></li><li><p><strong>opacity: 0</strong>：透明度设置为 0，实现元素的隐藏。元素在页面中<strong>仍然占据空间</strong>，并且能<strong>够响应元素绑定的监听事件</strong>。</p></li><li><p><strong>position: absolute</strong>：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</p></li><li><p><strong>z-index: 负值</strong>：来使其他元素遮盖住该元素，以此来实现隐藏。</p></li><li><p>**transform: scale(0,0)**：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</p></li></ol><h1 id="display-none与visibility-hidden的区别"><a href="#display-none与visibility-hidden的区别" class="headerlink" title="display:none与visibility:hidden的区别"></a>display:none与visibility:hidden的区别</h1><p>（1）<strong>在渲染树中</strong></p><ul><li><code>display:none</code>会让元素完全从渲染树中消失，渲染时不会占据任何空间；</li><li><code>visibility:hidden</code>不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。</li></ul><p>（2）<strong>是否是继承属性</strong></p><ul><li><code>display:none</code>是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；</li><li><code>visibility:hidden</code>是继承属性，子孙节点消失是由于继承了<code>hidden</code>，通过设置<code>visibility:visible</code>可以让子孙节点显示； </li></ul><p>（3）修改常规文档流中元素的 <code>display</code> 通常会造成文档的<strong>重排</strong>，但是修改<code>visibility</code>属性只会造成本元素的<strong>重绘</strong>；</p><p>（4）如果使用读屏器，设置为<code>display:none</code>的内容不会被读取，设置为<code>visibility:hidden</code>的内容会被读取。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据类型检测(4种)</title>
    <link href="/2023/11/05/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B(4%E7%A7%8D)/"/>
    <url>/2023/11/05/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B(4%E7%A7%8D)/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型检测-4种"><a href="#数据类型检测-4种" class="headerlink" title="数据类型检测(4种)"></a>数据类型检测(4种)</h1><h2 id="1-typeof-操作符"><a href="#1-typeof-操作符" class="headerlink" title="1.typeof 操作符"></a>1.typeof 操作符</h2><p>基于<code>typeof</code>检测出来的结果是一个字符串。<br>局限性：数组、对象、null都会被判断为<code>object</code>，其他判断都正确。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;; <span class="hljs-comment">// &quot;object&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-instanceof-操作符"><a href="#2-instanceof-操作符" class="headerlink" title="2.instanceof 操作符"></a>2.instanceof 操作符</h2><p><code>instanceof</code> <strong>其内部运行机制是判断在其原型链中能否找到该类型的原型</strong>。<br>局限性：<code>instanceof</code>只能正确判断引用数据类型，而不能判断基本数据类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Number</span>);                    <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Boolean</span>);                <span class="hljs-comment">// false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>);                <span class="hljs-comment">// false </span><br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>);                    <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>);       <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);                   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3.constructor"></a>3.constructor</h2><ol><li><p>判断数据的类型</p></li><li><p>对象实例通过 <code>constrcutor</code> 对象访问它的构造函数。</p></li></ol><p>需要注意，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-number">2</span>).<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Number</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-literal">true</span>).<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Boolean</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-string">&#x27;str&#x27;</span>).<span class="hljs-property">constructor</span> === <span class="hljs-title class_">String</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(([]).<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;).<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Function</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((&#123;&#125;).<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>); <span class="hljs-comment">// true</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f.<span class="hljs-property">constructor</span>===<span class="hljs-title class_">Fn</span>);    <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f.<span class="hljs-property">constructor</span>===<span class="hljs-title class_">Array</span>); <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><h2 id="4-Object-prototype-toString-call-方法"><a href="#4-Object-prototype-toString-call-方法" class="headerlink" title="4.Object.prototype.toString.call 方法"></a>4.Object.prototype.toString.call 方法</h2><p>   <code>Object.prototype.toString</code> 方法返回一个表示对象的类型的字符串。通过调用这个方法，并使用 <code>call</code> 或 <code>apply</code> 来将要检测的变量作为参数传递，可以得到更精确的类型信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">42</span>); <span class="hljs-comment">// &quot;[object Number]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// &quot;[object String]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// &quot;[object Boolean]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// &quot;[object Undefined]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// &quot;[object Null]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">// &quot;[object Array]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(&#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;); <span class="hljs-comment">// &quot;[object Object]&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>undefined和null的异同</title>
    <link href="/2023/11/04/undefined%E5%92%8Cnull%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <url>/2023/11/04/undefined%E5%92%8Cnull%E7%9A%84%E5%BC%82%E5%90%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="undefined和null的异同"><a href="#undefined和null的异同" class="headerlink" title="undefined和null的异同"></a>undefined和null的异同</h1><ol><li><p><strong><code>undefined</code>：</strong></p><ul><li>当声明了一个变量但没有初始化时，该变量的值是 <code>undefined</code>。</li><li>函数中没有明确返回值时，默认返回 <code>undefined</code>。</li><li>当对象没有赋值的属性时，访问这个属性会返回 <code>undefined</code>。</li></ul></li><li><p><strong><code>null</code>：</strong></p><ul><li><code>null</code> 是一个表示空或不存在对象的特殊值。它是一个赋值给变量的值，用来表示变量不指向任何对象。</li><li>如果一个函数的目的是返回一个对象，但由于某种原因无法返回对象时，通常会返回 <code>null</code>。</li></ul></li></ol><p>总结来说，<code>undefined</code> 表示一个变量<strong>已经被声明但尚未被赋值</strong>，或者一个属性不存在于对象中。而 <code>null</code> 表示一个变量<strong>已经被声明并赋值为 null</strong>，或者一个函数明确地返回了一个空对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center"></th><th align="center">Undefined</th><th align="center">Null</th></tr></thead><tbody><tr><td align="center">Boolean类型</td><td align="center">false</td><td align="center">false</td></tr><tr><td align="center">typeof检测</td><td align="center">undefined</td><td align="center">object</td></tr><tr><td align="center">number类型</td><td align="center"><strong>NaN</strong></td><td align="center"><strong>0</strong></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串反转</title>
    <link href="/2023/11/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC/"/>
    <url>/2023/11/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串逆序输出"><a href="#字符串逆序输出" class="headerlink" title="字符串逆序输出"></a>字符串逆序输出</h1><p>测试：<a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串 - 力扣（LeetCode）</a></p><h2 id="1-数组的reverse方法"><a href="#1-数组的reverse方法" class="headerlink" title="1.数组的reverse方法"></a>1.数组的reverse方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverseString</span>(<span class="hljs-params">str</span>)&#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-字符串的charAt"><a href="#2-字符串的charAt" class="headerlink" title="2.字符串的charAt()"></a>2.字符串的charAt()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverseString</span>(<span class="hljs-params">str</span>)&#123;<br>      <span class="hljs-keyword">var</span> newStr=<span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=str.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        newStr+=str.<span class="hljs-title function_">charAt</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> newStr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-学习递归函数"><a href="#3-学习递归函数" class="headerlink" title="3.学习递归函数"></a>3.学习递归函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverseString</span>(<span class="hljs-params">str,pos,strOut</span>)&#123;<br>    <span class="hljs-keyword">if</span>(pos&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> strOut;<br>    strOut +=str.<span class="hljs-title function_">charAt</span>(pos--);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">reverseString</span>(str,pos,strOut);<br>&#125;<br><span class="hljs-keyword">var</span> str =<span class="hljs-string">&#x27;abcdefg&#x27;</span>;<br><span class="hljs-keyword">var</span> result=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reverseString</span>(str,str.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>,result));<br></code></pre></td></tr></table></figure><h2 id="4-call函数改变slice-函数执行主体"><a href="#4-call函数改变slice-函数执行主体" class="headerlink" title="4.call函数改变slice()函数执行主体"></a>4.call函数改变slice()函数执行主体</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverseString</span>(<span class="hljs-params">str</span>)&#123;<br>    <span class="hljs-comment">//它可以用于任何类数组对象，不仅仅是字符串。</span><br>    <span class="hljs-keyword">var</span> arr=<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(str);<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0.1 + 0.2 != 0.3</title>
    <link href="/2023/11/04/0.1+0.2%EF%BC%81=0.3/"/>
    <url>/2023/11/04/0.1+0.2%EF%BC%81=0.3/</url>
    
    <content type="html"><![CDATA[<h1 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1 + 0.2 != 0.3"></a>0.1 + 0.2 != 0.3</h1><p>在大多数编程语言中，0.1 + 0.2 的计算结果实际上是 0.30000000000000004，而不是 0.3。这是因为计算机使用二进制表示浮点数，而有些十进制小数无法精确地用二进制表示。</p><ul><li><p>整数用二进制没有误差，如 <code>9</code> 在计算机中表示为 <code>1001</code></p></li><li><p>而有的小数无法用二进制表示，因为在计算机中，浮点数的计算存在精度问题，导致一些看似简单的算术运算结果与预期不符。</p></li></ul><p>这种精度问题在计算机科学中很常见，因此在处理浮点数运算时，通常需要使用一些技巧来避免精度问题，比如四舍五入、取整等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">(n1 + n2).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">1</span>)   <span class="hljs-comment">// toFixed可把 Number 四舍五入为指定小数位数的数字</span><br></code></pre></td></tr></table></figure><h1 id="如果项目中频繁的要做小数点的运算，怎么办？"><a href="#如果项目中频繁的要做小数点的运算，怎么办？" class="headerlink" title="如果项目中频繁的要做小数点的运算，怎么办？"></a>如果项目中频繁的要做小数点的运算，怎么办？</h1><p>可以采用以下方法来处理：</p><ol><li>使用JavaScript的内置函数进行运算，比如<code>Math.round()</code>、<code>Math.ceil()</code>和<code>Math.floor()</code>等，它们可以对小数进行四舍五入、向上取整和向下取整操作。</li><li>将小数转换为整数进行运算，然后再将结果转换回小数。例如，可以将小数乘以10或100，然后使用整数运算，最后再除以10或100。</li><li>使用第三方库，例如decimal.js或big.js，它们提供了更精确的小数点运算。</li></ol><p>下面是一个使用JavaScript内置函数进行小数点运算的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 四舍五入</span><br><span class="hljs-keyword">var</span> roundedValue = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>); <span class="hljs-comment">// 0.3</span><br><span class="hljs-comment">// 向上取整</span><br><span class="hljs-keyword">var</span> ceilValue = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 向下取整</span><br><span class="hljs-keyword">var</span> floorValue = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p>如果需要更精确的运算，可以考虑使用第三方库。例如，使用decimal.js库可以进行精确的小数点运算：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入decimal.js库</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Decimal</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;decimal.js&#x27;</span>);<br><br><span class="hljs-comment">// 创建Decimal对象进行运算</span><br><span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decimal</span>(<span class="hljs-number">0.1</span>).<span class="hljs-title function_">plus</span>(<span class="hljs-number">0.2</span>).<span class="hljs-title function_">valueOf</span>(); <span class="hljs-comment">// 0.3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>==数据类型转换的规则</title>
    <link href="/2023/11/04/==%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E8%A7%84%E5%88%99/"/>
    <url>/2023/11/04/==%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<ol><li><p><strong>相同的数据类型</strong></p></li><li><p><strong>不同类型的数据</strong><br>JavaScript 会尝试将两个操作数转换为相同的类型，然后再进行比较。</p></li></ol><ul><li><strong>字符串和数字比较：</strong><br>   如果一个操作数是字符串，另一个操作数是数字，在比较时会将字符串转换为数字，然后进行比较。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;5&#x27;</span> == <span class="hljs-number">5</span>; <span class="hljs-comment">// true (字符串 &#x27;5&#x27; 被转换为数字 5)</span><br><span class="hljs-string">&#x27;hello&#x27;</span> == <span class="hljs-number">0</span>; <span class="hljs-comment">// false (字符串无法转换为数字)</span><br></code></pre></td></tr></table></figure><ul><li><strong>布尔值和其他类型比较：</strong><br>如果一个操作数是布尔值，它会被转换为数字（<code>true</code> 转换为 <code>1</code>，<code>false</code> 转换为 <code>0</code>），然后进行比较。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">true</span> == <span class="hljs-number">1</span>; <span class="hljs-comment">// true (true 被转换为数字 1)</span><br><span class="hljs-literal">false</span> == <span class="hljs-number">0</span>; <span class="hljs-comment">// true (false 被转换为数字 0)</span><br></code></pre></td></tr></table></figure><ul><li><strong>null 和 undefined：</strong><br><code>null</code> 和 <code>undefined</code> 在比较时相等。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li><strong>对象和原始值比较：</strong><br>如果一个操作数是对象，另一个操作数是原始值，在比较时会尝试将对象转换为原始值，然后再进行比较。对象会调用 <code>valueOf</code> 或 <code>toString</code> 方法来获取比较的值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">valueOf</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>;<br>  &#125;<br>&#125;;<br>obj == <span class="hljs-number">42</span>; <span class="hljs-comment">// true (对象 obj 调用了 valueOf 方法返回 42)</span><br></code></pre></td></tr></table></figure><p>建议在比较时使用严格相等运算符（===），它不会进行类型转换，比较时会同时比较值和数据类型。</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据类型</title>
    <link href="/2023/11/04/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/11/04/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">-基本数据类型（<span class="hljs-number">7</span>种）:number,string,boolean,<span class="hljs-literal">null</span>,<span class="hljs-literal">undefined</span>,symbol,bigInt<br>-引用数据类型（<span class="hljs-number">5</span>种）:<span class="hljs-title class_">Object</span>,<span class="hljs-title class_">Array</span>,<span class="hljs-title class_">Function</span>,<span class="hljs-title class_">Date</span>,<span class="hljs-title class_">RegExp</span><br></code></pre></td></tr></table></figure><h1 id="2-堆栈内存"><a href="#2-堆栈内存" class="headerlink" title="2.堆栈内存"></a>2.堆栈内存</h1><p><strong>存储数据</strong>的不同：</p><ul><li>原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小，大小固定，属于被频繁使用的数据，所以存储在栈中； </li><li>引用数据类型存储在堆（heap）中的对象，占据空间大，大小不固定，如果存储在栈中，将会影响程序运行的性能。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址，当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后，从堆中获得实体。</li></ul><p>堆和栈的概念存在于数据结构和操作系统内存中，在<strong>数据结构</strong>中：</p><ul><li>在数据结构中，栈中数据的存取方式为先进后出。</li><li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li></ul><p>在<strong>操作系统</strong>中，内存被分为栈区和堆区：</p><ul><li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li><li>堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li></ul><h1 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">其他数值转换为字符串：<span class="hljs-title class_">String</span>(xxx)函数、xxx.<span class="hljs-title function_">toString</span>()方法、拼串<br>非数值转换为数值：<span class="hljs-title class_">Number</span>(xxx)函数、<span class="hljs-built_in">parseInt</span>(xxx)和<span class="hljs-built_in">parseFloat</span>(xxx)<br>布尔型转换 <span class="hljs-title class_">Boolean</span>(xxx);<br></code></pre></td></tr></table></figure><ol><li><strong>Boolean类型转换</strong></li></ol><table><thead><tr><th align="center"></th><th align="center">String</th><th align="center">Number</th><th align="center">Object</th><th align="center">Function</th><th align="center">NUll</th><th align="center">Undefined</th></tr></thead><tbody><tr><td align="center">true</td><td align="center">任何非空字符串包括” “</td><td align="center">除了0和NaN</td><td align="center">不为null，包括{}</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">false</td><td align="center">“”或‘’</td><td align="center"><strong>0和NaN</strong></td><td align="center">null</td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr></tbody></table><ol start="2"><li><p><strong>Number类型转换</strong></p><ul><li><p>字符串：看是否包含非有效数字字符，包含结果就是NaN；空字符串：0</p></li><li><p>null：0 </p></li><li><p>undefined：NaN</p></li><li><p>object类型都要先转换为字符串再转换为数字    </p></li></ul></li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">- &#123;&#125;/正则/函数等：<span class="hljs-title class_">NaN</span>    <br>- [ ] -&gt;<span class="hljs-string">&#x27;&#x27;</span>-&gt;<span class="hljs-number">0</span>    <br>- [<span class="hljs-string">&#x27;12&#x27;</span>] -&gt;<span class="hljs-string">&#x27;12&#x27;</span> -&gt;<span class="hljs-number">12</span>   <br>- [<span class="hljs-number">12</span>,<span class="hljs-number">23</span>] -&gt;<span class="hljs-string">&#x27;12,23&#x27;</span> -&gt;<span class="hljs-title class_">NaN</span><br></code></pre></td></tr></table></figure><blockquote><p>Number(xxx)函数、parseInt(xxx)和parseFloat(xxx)</p><ul><li><p>parseInt/parseFloat() 遵循按照字符串从左到右查找的机制找有效数字字符（所以传递的值一定是字符串,不是也要转换为字符串然后再查找）</p></li><li><p>parseInt(undefined) -&gt;parseInt(‘undefined’) -&gt;NaN </p></li><li><p>parseInt(‘’) -&gt;NaN</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数组去重</title>
    <link href="/2023/11/04/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <url>/2023/11/04/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="去重-5种"><a href="#去重-5种" class="headerlink" title="去重(5种)"></a>去重(5种)</h1><h2 id="1-for-嵌套-for，然后-splice-去重"><a href="#1-for-嵌套-for，然后-splice-去重" class="headerlink" title="1. for 嵌套 for，然后 splice 去重"></a>1. for 嵌套 for，然后 splice 去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;  <span class="hljs-comment">//获取数组每一个元素</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i+<span class="hljs-number">1</span>;j&lt;arr.<span class="hljs-property">length</span>;j++)&#123;  <span class="hljs-comment">//获取当前元素后的所有元素</span><br>        <span class="hljs-keyword">if</span>(arr[j]==arr[i]) <br>            arr.<span class="hljs-title function_">splice</span>(j,<span class="hljs-number">1</span>);   <span class="hljs-comment">//若出现重复的元素，则删除j对应的元素</span><br>            j--;    <br>    <span class="hljs-comment">//当删除当前j所在的元素以后，后面的元素会自动补齐，此事不会再比较这个元素，所以需要j自减，再比一遍。</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>, <span class="hljs-literal">undefined</span>,<span class="hljs-literal">undefined</span>, <span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>,<span class="hljs-string">&#x27;NaN&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;&#125;, &#123;&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span><br></code></pre></td></tr></table></figure><h2 id="2-利用includes去重"><a href="#2-利用includes去重" class="headerlink" title="2.利用includes去重"></a>2.利用includes去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span> (arr)&#123;<br>    <span class="hljs-keyword">var</span> newArr = [];<br>    arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(newArr.<span class="hljs-title function_">includes</span>(item)) <span class="hljs-keyword">return</span>;<br>        newArr.<span class="hljs-title function_">push</span>(item);<br>    &#125;);<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>, <span class="hljs-literal">undefined</span>,<span class="hljs-literal">undefined</span>, <span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>,<span class="hljs-string">&#x27;NaN&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]     //&#123;&#125;没有去重</span><br></code></pre></td></tr></table></figure><h2 id="3-利用filter去重"><a href="#3-利用filter去重" class="headerlink" title="3.利用filter去重"></a>3.利用filter去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>) &#123;<br>    <span class="hljs-comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span><br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">indexOf</span>(item, <span class="hljs-number">0</span>) === index;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>, <span class="hljs-literal">undefined</span>,<span class="hljs-literal">undefined</span>, <span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>,<span class="hljs-string">&#x27;NaN&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span><br></code></pre></td></tr></table></figure><h2 id="4-reduce和includes去重"><a href="#4-reduce和includes去重" class="headerlink" title="4.reduce和includes去重"></a>4.reduce和includes去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev,cur</span>) =&gt;</span> prev.<span class="hljs-title function_">includes</span>(cur) ? prev : [...prev,cur],[]);<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>, <span class="hljs-literal">undefined</span>,<span class="hljs-literal">undefined</span>, <span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>,<span class="hljs-string">&#x27;NaN&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr));<br><span class="hljs-comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span><br></code></pre></td></tr></table></figure><h2 id="5-利用-ES6-Set-去重"><a href="#5-利用-ES6-Set-去重" class="headerlink" title="5.利用 ES6 Set 去重"></a>5.利用 ES6 Set 去重</h2><p>Set对象：Set中的元素只会出现一次，即Set中的元素是唯一的。<br>Array.from() 方法：对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。<br>但是这种方法还无法去掉 <code>&#123;&#125;</code> 空对象<br>注意：该方法对NaN和undefined类型去重也是有效的，因为NaN和undefined都可以被存储在Set中， NaN之间被视为相同的值（尽管在js中：NaN !== NaN）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span> (arr) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr));<br><span class="hljs-comment">//  return [...new Set(arr)];  使用...扩展运算符简写</span><br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>, <span class="hljs-literal">undefined</span>,<span class="hljs-literal">undefined</span>, <span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>, <span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>,<span class="hljs-string">&#x27;NaN&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unique</span>(arr))<br><span class="hljs-comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;] </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程和线程的区别</title>
    <link href="/2023/11/04/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/11/04/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h1><h2 id="进程是资源分配的最小单位，线程是CPU调度的最小单位"><a href="#进程是资源分配的最小单位，线程是CPU调度的最小单位" class="headerlink" title="进程是资源分配的最小单位，线程是CPU调度的最小单位"></a>进程是资源分配的最小单位，线程是CPU调度的最小单位</h2><p>做个简单的比喻：进程=火车，线程=车厢</p><ul><li><p><strong>线程在进程下行进</strong>（单纯的车厢无法运行）</p></li><li><p><strong>一个进程可以包含多个线程</strong>（一辆火车可以有多个车厢）</p></li><li><p><strong>不同进程间数据很难共享</strong>（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</p></li><li><p><strong>同一进程下不同线程间数据很易共享</strong>（A车厢换到B车厢很容易）</p></li><li><p><strong>进程要比线程消耗更多的计算机资源</strong>（采用多列火车相比多个车厢更耗资源）</p></li><li><p><strong>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉</strong>（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</p></li><li><p><strong>进程可以拓展到多机，进程最多适合多核</strong>（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</p></li><li><p><strong>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</strong>（比如火车上的洗手间）－”互斥锁”</p></li><li><p><strong>进程使用的内存地址可以限定使用量</strong>（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－”信号量”</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>表单标签</title>
    <link href="/2023/11/03/%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE/"/>
    <url>/2023/11/03/%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p>学习：<a href="https://www.runoob.com/html/html-forms.html">HTML 表单 | 菜鸟教程</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cookie、sessionStorage、localStorage的区别</title>
    <link href="/2023/11/02/cookie%E3%80%81sessionStorage%E3%80%81localStorage%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/11/02/cookie%E3%80%81sessionStorage%E3%80%81localStorage%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/localstorage.jpg"></p><h1 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h1><p>三者都是开发过程中最常用的临时存储数据的方式。</p><h1 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h1><h2 id="1-存储的时间有效期不同"><a href="#1-存储的时间有效期不同" class="headerlink" title="1.存储的时间有效期不同"></a>1.存储的时间有效期不同</h2><ul><li>cookie的有效期是可以进行设置的，它能够跨页面存储数据，在默认的时间内，只要不关闭当前浏览器窗口，cookie就是一直有效的。</li><li>sessionStorage的有效期是仅保持在当前页面，关闭当前会话页或者浏览器后就会失效</li><li>localStorage的有效期除非人工手动删除，否则一直存在，关闭当前会话页或者关闭浏览器是依然存在的。</li></ul><h2 id="2-存储的大小不同"><a href="#2-存储的大小不同" class="headerlink" title="2.存储的大小不同"></a>2.存储的大小不同</h2><ul><li>cookie的存储量较小，存储容量是4kb左右，一般页面最多存储20条左右信息。</li><li>localStorage和sessionStorage的存储容量是5Mb，不同的浏览器有一些差异不同。</li></ul><h2 id="3-与服务端的通信的差异"><a href="#3-与服务端的通信的差异" class="headerlink" title="3.与服务端的通信的差异"></a>3.与服务端的通信的差异</h2><ul><li>localStorage和sessionStorage是不会进行服务器通信的，他们只会在客户端进行数据的保存。</li><li>cookie会参与到与服务端的通信中，一般会携带在http请求的头部中，会消耗一部分带宽。一般可用于验证登陆者信息的凭证。</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Localstorage</title>
    <link href="/2023/11/01/Localstorage/"/>
    <url>/2023/11/01/Localstorage/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h1><table><thead><tr><th align="center">名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">clear</td><td align="center">清空localStorage上存储的数据</td></tr><tr><td align="center">getItem</td><td align="center">读取数据</td></tr><tr><td align="center">setItem</td><td align="center">存储数据</td></tr><tr><td align="center">hasOwnPropertykey</td><td align="center">检查localStorage上是否保存了变量x，需要传入x</td></tr><tr><td align="center">key</td><td align="center">读取第i个数据的名字或称为键值(从0开始计数)</td></tr><tr><td align="center">length</td><td align="center">localStorage存储变量的个数</td></tr><tr><td align="center">propertyIsEnumerable</td><td align="center">用来检测属性是否属于某个对象的</td></tr><tr><td align="center">removeItem</td><td align="center">删除某个具体变量</td></tr><tr><td align="center">toLocaleString</td><td align="center">将（数组）转为本地字符串</td></tr><tr><td align="center">valueOf</td><td align="center">获取所有存储的数据</td></tr></tbody></table><h1 id="存储对象"><a href="#存储对象" class="headerlink" title="存储对象"></a>存储对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> students = &#123;<br>    <span class="hljs-attr">xiaomin</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaoming&quot;</span>,<br>        <span class="hljs-attr">grade</span>: <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">teemo</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;teemo&quot;</span>,<br>        <span class="hljs-attr">grade</span>: <span class="hljs-number">3</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;students&quot;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(students)); <span class="hljs-comment">//将变量存到localStorage里</span><br><span class="hljs-keyword">var</span> newStudents =<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;students&quot;</span>)); <span class="hljs-comment">//打印出原先对象</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
